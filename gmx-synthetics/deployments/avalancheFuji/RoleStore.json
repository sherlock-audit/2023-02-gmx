{
  "address": "0x4C5Ef06b33b9EAB7581423A8D079225B78De0784",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "getRoleCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getRoleMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getRoles",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x60e6e9408fdc6e166ed5499c66d6068ab26c29e317c2f39835fabb6893dccf1f",
  "receipt": {
    "to": null,
    "from": "0xFb11f15f206bdA02c224EDC744b0E50E46137046",
    "contractAddress": "0x4C5Ef06b33b9EAB7581423A8D079225B78De0784",
    "transactionIndex": 0,
    "gasUsed": "711692",
    "logsBloom": "0x
    "blockHash": "0xea1b8cc58075a151fbd8b27e85e252808a342c446a8595de5ad0c0c8d939b2d3",
    "transactionHash": "0x60e6e9408fdc6e166ed5499c66d6068ab26c29e317c2f39835fabb6893dccf1f",
    "logs": [],
    "blockNumber": 18351204,
    "cumulativeGasUsed": "711692",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "bfcff1dcb3466d4762643d92a17aef63",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getRoleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getRoleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getRoles\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Stores roles and their members.\",\"kind\":\"dev\",\"methods\":{\"getRoleCount()\":{\"details\":\"Returns the number of roles stored in the contract.\",\"returns\":{\"_0\":\"The number of roles.\"}},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of members of the specified role.\",\"params\":{\"key\":\"The key of the role.\"},\"returns\":{\"_0\":\"The number of members of the role.\"}},\"getRoleMembers(bytes32,uint256,uint256)\":{\"details\":\"Returns the members of the specified role.\",\"params\":{\"end\":\"the end index, the value for this index will not be included.\",\"key\":\"The key of the role.\",\"start\":\"the start index, the value for this index will be included.\"},\"returns\":{\"_0\":\"The members of the role.\"}},\"getRoles(uint256,uint256)\":{\"details\":\"Returns the keys of the roles stored in the contract.\",\"params\":{\"end\":\"The ending index of the range of roles to return.\",\"start\":\"The starting index of the range of roles to return.\"},\"returns\":{\"_0\":\"The keys of the roles.\"}},\"grantRole(address,bytes32)\":{\"details\":\"Grants the specified role to the given account.\",\"params\":{\"account\":\"The address of the account.\",\"key\":\"The key of the role to grant.\"}},\"hasRole(address,bytes32)\":{\"details\":\"Returns true if the given account has the specified role.\",\"params\":{\"account\":\"The address of the account.\",\"key\":\"The key of the role.\"},\"returns\":{\"_0\":\"True if the account has the role, false otherwise.\"}},\"revokeRole(address,bytes32)\":{\"details\":\"Revokes the specified role from the given account.\",\"params\":{\"account\":\"The address of the account.\",\"key\":\"The key of the role to revoke.\"}}},\"title\":\"RoleStore\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/role/RoleStore.sol\":\"RoleStore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Role\\n * @dev Library for role keys\\n */\\nlibrary Role {\\n    /**\\n     * @dev The ROLE_ADMIN role.\\n     */\\n    bytes32 public constant ROLE_ADMIN = keccak256(abi.encode(\\\"ROLE_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_ADMIN role.\\n     */\\n    bytes32 public constant TIMELOCK_ADMIN = keccak256(abi.encode(\\\"TIMELOCK_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_MULTISIG role.\\n     */\\n    bytes32 public constant TIMELOCK_MULTISIG = keccak256(abi.encode(\\\"TIMELOCK_MULTISIG\\\"));\\n\\n    /**\\n     * @dev The CONFIG_KEEPER role.\\n     */\\n    bytes32 public constant CONFIG_KEEPER = keccak256(abi.encode(\\\"CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The CONTROLLER role.\\n     */\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The ROUTER_PLUGIN role.\\n     */\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n\\n    /**\\n     * @dev The MARKET_KEEPER role.\\n     */\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_KEEPER role.\\n     */\\n    bytes32 public constant FEE_KEEPER = keccak256(abi.encode(\\\"FEE_KEEPER\\\"));\\n\\n    /**\\n     * @dev The ORDER_KEEPER role.\\n     */\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FROZEN_ORDER_KEEPER role.\\n     */\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The PRICING_KEEPER role.\\n     */\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    /**\\n     * @dev The LIQUIDATION_KEEPER role.\\n     */\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    /**\\n     * @dev The ADL_KEEPER role.\\n     */\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n}\\n\",\"keccak256\":\"0x274c57667c715caa0b5b476ca0a46da20de5fbe2a882203e8c418799fd1302ca\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"./Role.sol\\\";\\n\\n/**\\n * @title RoleStore\\n * @dev Stores roles and their members.\\n */\\ncontract RoleStore {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    error Unauthorized(address msgSender, string role);\\n\\n    modifier onlyRoleAdmin() {\\n        if (!hasRole(msg.sender, Role.ROLE_ADMIN)) {\\n            revert Unauthorized(msg.sender, \\\"ROLE_ADMIN\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _grantRole(msg.sender, Role.ROLE_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Grants the specified role to the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param key The key of the role to grant.\\n     */\\n    function grantRole(address account, bytes32 key) external onlyRoleAdmin {\\n        _grantRole(account, key);\\n    }\\n\\n    /**\\n     * @dev Revokes the specified role from the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param key The key of the role to revoke.\\n     */\\n    function revokeRole(address account, bytes32 key) external onlyRoleAdmin {\\n        _revokeRole(account, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the given account has the specified role.\\n     *\\n     * @param account The address of the account.\\n     * @param key The key of the role.\\n     * @return True if the account has the role, false otherwise.\\n     */\\n    function hasRole(address account, bytes32 key) public view returns (bool) {\\n        return roleCache[account][key];\\n    }\\n\\n    /**\\n     * @dev Returns the number of roles stored in the contract.\\n     *\\n     * @return The number of roles.\\n     */\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    /**\\n     * @dev Returns the keys of the roles stored in the contract.\\n     *\\n     * @param start The starting index of the range of roles to return.\\n     * @param end The ending index of the range of roles to return.\\n     * @return The keys of the roles.\\n     */\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    /**\\n     * @dev Returns the number of members of the specified role.\\n     *\\n     * @param key The key of the role.\\n     * @return The number of members of the role.\\n     */\\n    function getRoleMemberCount(bytes32 key) external view returns (uint256) {\\n        return roleMembers[key].length();\\n    }\\n\\n    /**\\n     * @dev Returns the members of the specified role.\\n     *\\n     * @param key The key of the role.\\n     * @param start the start index, the value for this index will be included.\\n     * @param end the end index, the value for this index will not be included.\\n     * @return The members of the role.\\n     */\\n    function getRoleMembers(bytes32 key, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[key].valuesAt(start, end);\\n    }\\n\\n    function _grantRole(address account, bytes32 key) internal {\\n        roles.add(key);\\n        roleMembers[key].add(account);\\n        roleCache[account][key] = true;\\n    }\\n\\n    function _revokeRole(address account, bytes32 key) internal {\\n        roleMembers[key].remove(account);\\n        roleCache[account][key] = false;\\n\\n        if (key == Role.ROLE_ADMIN && roleMembers[key].length() == 0) {\\n            revert(\\\"There must be at least one role admin\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x325ec646d15f77619b1419e2691ac598775399432a4b5b2c58f4114d4c42ef36\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title EnumerableValues\\n * @dev Library to extend the EnumerableSet library with functions to get\\n * valuesAt for a range\\n */\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * Returns an array of bytes32 values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of bytes32 values.\\n     */\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of address values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of address values.\\n     */\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of uint256 values from the given set, starting at the given\\n     * start index and ending before the given end index, the item at the end index will not be returned.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index (inclusive, item at the start index will be returned).\\n     * @param end The ending index (exclusive, item at the end index will not be returned).\\n     * @return An array of uint256 values.\\n     */\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        if (start >= set.length()) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x1e525ad5645bc649551fa3a7d000af1cec96221d7fe1cdc17cedaf942b018f0d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061006433604051602001610043906020808252600a90820152692927a622afa0a226a4a760b11b604082015260600190565b6040516020818303038152906040528051906020012061006960201b60201c565b61014c565b6100818160006100d760201b61025d1790919060201c565b5060008181526002602090815260409091206100a69184906102696100ec821b17901c565b506001600160a01b03909116600090815260036020908152604080832093835292905220805460ff19166001179055565b60006100e383836100fd565b90505b92915050565b60006100e3836001600160a01b0384165b6000818152600183016020526040812054610144575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556100e6565b5060006100e6565b6109018061015b6000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c8063208dd1ff146100725780632a861f5714610087578063821c1898146100b057806383d33319146100d0578063ab2742dc146100e6578063ac4ab3fb146100f9578063ca15c8731461011c575b600080fd5b6100856100803660046106d1565b61012f565b005b61009a610095366004610709565b610193565b6040516100a79190610735565b60405180910390f35b6100c36100be366004610782565b6101b7565b6040516100a791906107a4565b6100d86101ce565b6040519081526020016100a7565b6100856100f43660046106d1565b6101df565b61010c6101073660046106d1565b61021b565b60405190151581526020016100a7565b6100d861012a3660046107dc565b610246565b61015d3360405160200161014290610812565b6040516020818303038152906040528051906020012061021b565b610185573360405163a35b150b60e01b815260040161017c9190610824565b60405180910390fd5b61018f828261027e565b5050565b60008381526002602052604090206060906101af908484610362565b949350505050565b60606101c56000848461042f565b90505b92915050565b60006101da60006104e5565b905090565b6101f23360405160200161014290610812565b610211573360405163a35b150b60e01b815260040161017c9190610824565b61018f82826104ef565b6001600160a01b03919091166000908152600360209081526040808320938352929052205460ff1690565b60008181526002602052604081206101c8906104e5565b60006101c58383610544565b60006101c5836001600160a01b038416610544565b60008181526002602052604090206102969083610593565b506001600160a01b0382166000908152600360209081526040808320848452825291829020805460ff1916905590516102cf9101610812565b604051602081830303815290604052805190602001208114801561030757506000818152600260205260409020610305906104e5565b155b1561018f5760405162461bcd60e51b815260206004820152602560248201527f5468657265206d757374206265206174206c65617374206f6e6520726f6c652060448201526430b236b4b760d91b606482015260840161017c565b6060600061036f856104e5565b90508083111561037d578092505b6000610389858561085d565b6001600160401b038111156103a0576103a0610870565b6040519080825280602002602001820160405280156103c9578160200160208202803683370190505b509050845b84811015610425576103e087826105a8565b826103eb888461085d565b815181106103fb576103fb610886565b6001600160a01b03909216602092830291909101909101528061041d8161089c565b9150506103ce565b5095945050505050565b6060600061043c856104e5565b90508083111561044a578092505b6000610456858561085d565b6001600160401b0381111561046d5761046d610870565b604051908082528060200260200182016040528015610496578160200160208202803683370190505b509050845b84811015610425576104ad87826105a8565b826104b8888461085d565b815181106104c8576104c8610886565b6020908102919091010152806104dd8161089c565b91505061049b565b60006101c8825490565b6104fa60008261025d565b5060008181526002602052604090206105139083610269565b506001600160a01b03909116600090815260036020908152604080832093835292905220805460ff19166001179055565b600081815260018301602052604081205461058b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101c8565b5060006101c8565b60006101c5836001600160a01b0384166105b4565b60006101c583836106a7565b6000818152600183016020526040812054801561069d5760006105d860018361085d565b85549091506000906105ec9060019061085d565b905081811461065157600086600001828154811061060c5761060c610886565b906000526020600020015490508087600001848154811061062f5761062f610886565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610662576106626108b5565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101c8565b60009150506101c8565b60008260000182815481106106be576106be610886565b9060005260206000200154905092915050565b600080604083850312156106e457600080fd5b82356001600160a01b03811681146106fb57600080fd5b946020939093013593505050565b60008060006060848603121561071e57600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b818110156107765783516001600160a01b031683529284019291840191600101610751565b50909695505050505050565b6000806040838503121561079557600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610776578351835292840192918401916001016107c0565b6000602082840312156107ee57600080fd5b5035919050565b600a8152692927a622afa0a226a4a760b11b602082015260400190565b6020815260006101c8602083016107f5565b6001600160a01b03821681526040602082018190526000906101c59083016107f5565b634e487b7160e01b600052601160045260246000fd5b818103818111156101c8576101c8610847565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016108ae576108ae610847565b5060010190565b634e487b7160e01b600052603160045260246000fdfea264697066735822122024b5a634f1cf37469a6196c92717c1a5545e256167990bfaa0cb5235445cab1a64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061006d5760003560e01c8063208dd1ff146100725780632a861f5714610087578063821c1898146100b057806383d33319146100d0578063ab2742dc146100e6578063ac4ab3fb146100f9578063ca15c8731461011c575b600080fd5b6100856100803660046106d1565b61012f565b005b61009a610095366004610709565b610193565b6040516100a79190610735565b60405180910390f35b6100c36100be366004610782565b6101b7565b6040516100a791906107a4565b6100d86101ce565b6040519081526020016100a7565b6100856100f43660046106d1565b6101df565b61010c6101073660046106d1565b61021b565b60405190151581526020016100a7565b6100d861012a3660046107dc565b610246565b61015d3360405160200161014290610812565b6040516020818303038152906040528051906020012061021b565b610185573360405163a35b150b60e01b815260040161017c9190610824565b60405180910390fd5b61018f828261027e565b5050565b60008381526002602052604090206060906101af908484610362565b949350505050565b60606101c56000848461042f565b90505b92915050565b60006101da60006104e5565b905090565b6101f23360405160200161014290610812565b610211573360405163a35b150b60e01b815260040161017c9190610824565b61018f82826104ef565b6001600160a01b03919091166000908152600360209081526040808320938352929052205460ff1690565b60008181526002602052604081206101c8906104e5565b60006101c58383610544565b60006101c5836001600160a01b038416610544565b60008181526002602052604090206102969083610593565b506001600160a01b0382166000908152600360209081526040808320848452825291829020805460ff1916905590516102cf9101610812565b604051602081830303815290604052805190602001208114801561030757506000818152600260205260409020610305906104e5565b155b1561018f5760405162461bcd60e51b815260206004820152602560248201527f5468657265206d757374206265206174206c65617374206f6e6520726f6c652060448201526430b236b4b760d91b606482015260840161017c565b6060600061036f856104e5565b90508083111561037d578092505b6000610389858561085d565b6001600160401b038111156103a0576103a0610870565b6040519080825280602002602001820160405280156103c9578160200160208202803683370190505b509050845b84811015610425576103e087826105a8565b826103eb888461085d565b815181106103fb576103fb610886565b6001600160a01b03909216602092830291909101909101528061041d8161089c565b9150506103ce565b5095945050505050565b6060600061043c856104e5565b90508083111561044a578092505b6000610456858561085d565b6001600160401b0381111561046d5761046d610870565b604051908082528060200260200182016040528015610496578160200160208202803683370190505b509050845b84811015610425576104ad87826105a8565b826104b8888461085d565b815181106104c8576104c8610886565b6020908102919091010152806104dd8161089c565b91505061049b565b60006101c8825490565b6104fa60008261025d565b5060008181526002602052604090206105139083610269565b506001600160a01b03909116600090815260036020908152604080832093835292905220805460ff19166001179055565b600081815260018301602052604081205461058b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101c8565b5060006101c8565b60006101c5836001600160a01b0384166105b4565b60006101c583836106a7565b6000818152600183016020526040812054801561069d5760006105d860018361085d565b85549091506000906105ec9060019061085d565b905081811461065157600086600001828154811061060c5761060c610886565b906000526020600020015490508087600001848154811061062f5761062f610886565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610662576106626108b5565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101c8565b60009150506101c8565b60008260000182815481106106be576106be610886565b9060005260206000200154905092915050565b600080604083850312156106e457600080fd5b82356001600160a01b03811681146106fb57600080fd5b946020939093013593505050565b60008060006060848603121561071e57600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b818110156107765783516001600160a01b031683529284019291840191600101610751565b50909695505050505050565b6000806040838503121561079557600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610776578351835292840192918401916001016107c0565b6000602082840312156107ee57600080fd5b5035919050565b600a8152692927a622afa0a226a4a760b11b602082015260400190565b6020815260006101c8602083016107f5565b6001600160a01b03821681526040602082018190526000906101c59083016107f5565b634e487b7160e01b600052601160045260246000fd5b818103818111156101c8576101c8610847565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016108ae576108ae610847565b5060010190565b634e487b7160e01b600052603160045260246000fdfea264697066735822122024b5a634f1cf37469a6196c92717c1a5545e256167990bfaa0cb5235445cab1a64736f6c63430008100033",
  "libraries": {},
  "devdoc": {
    "details": "Stores roles and their members.",
    "kind": "dev",
    "methods": {
      "getRoleCount()": {
        "details": "Returns the number of roles stored in the contract.",
        "returns": {
          "_0": "The number of roles."
        }
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of members of the specified role.",
        "params": {
          "key": "The key of the role."
        },
        "returns": {
          "_0": "The number of members of the role."
        }
      },
      "getRoleMembers(bytes32,uint256,uint256)": {
        "details": "Returns the members of the specified role.",
        "params": {
          "end": "the end index, the value for this index will not be included.",
          "key": "The key of the role.",
          "start": "the start index, the value for this index will be included."
        },
        "returns": {
          "_0": "The members of the role."
        }
      },
      "getRoles(uint256,uint256)": {
        "details": "Returns the keys of the roles stored in the contract.",
        "params": {
          "end": "The ending index of the range of roles to return.",
          "start": "The starting index of the range of roles to return."
        },
        "returns": {
          "_0": "The keys of the roles."
        }
      },
      "grantRole(address,bytes32)": {
        "details": "Grants the specified role to the given account.",
        "params": {
          "account": "The address of the account.",
          "key": "The key of the role to grant."
        }
      },
      "hasRole(address,bytes32)": {
        "details": "Returns true if the given account has the specified role.",
        "params": {
          "account": "The address of the account.",
          "key": "The key of the role."
        },
        "returns": {
          "_0": "True if the account has the role, false otherwise."
        }
      },
      "revokeRole(address,bytes32)": {
        "details": "Revokes the specified role from the given account.",
        "params": {
          "account": "The address of the account.",
          "key": "The key of the role to revoke."
        }
      }
    },
    "title": "RoleStore",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 44852,
        "contract": "contracts/role/RoleStore.sol:RoleStore",
        "label": "roles",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Bytes32Set)4137_storage"
      },
      {
        "astId": 44857,
        "contract": "contracts/role/RoleStore.sol:RoleStore",
        "label": "roleMembers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4244_storage)"
      },
      {
        "astId": 44863,
        "contract": "contracts/role/RoleStore.sol:RoleStore",
        "label": "roleCache",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4244_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4244_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4244_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4243,
            "contract": "contracts/role/RoleStore.sol:RoleStore",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3943_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)4137_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 4136,
            "contract": "contracts/role/RoleStore.sol:RoleStore",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3943_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3943_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3938,
            "contract": "contracts/role/RoleStore.sol:RoleStore",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3942,
            "contract": "contracts/role/RoleStore.sol:RoleStore",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}