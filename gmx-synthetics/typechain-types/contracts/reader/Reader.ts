/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Order {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialCollateralToken: PromiseOrValue<string>;
    swapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string[]
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type NumbersStruct = {
    orderType: PromiseOrValue<BigNumberish>;
    decreasePositionSwapType: PromiseOrValue<BigNumberish>;
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    initialCollateralDeltaAmount: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    orderType: number;
    decreasePositionSwapType: number;
    sizeDeltaUsd: BigNumber;
    initialCollateralDeltaAmount: BigNumber;
    triggerPrice: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    minOutputAmount: BigNumber;
    updatedAtBlock: BigNumber;
  };

  export type FlagsStruct = {
    isLong: PromiseOrValue<boolean>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isFrozen: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean, boolean, boolean] & {
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    isFrozen: boolean;
  };

  export type PropsStruct = {
    addresses: Order.AddressesStruct;
    numbers: Order.NumbersStruct;
    flags: Order.FlagsStruct;
  };

  export type PropsStructOutput = [
    Order.AddressesStructOutput,
    Order.NumbersStructOutput,
    Order.FlagsStructOutput
  ] & {
    addresses: Order.AddressesStructOutput;
    numbers: Order.NumbersStructOutput;
    flags: Order.FlagsStructOutput;
  };
}

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export declare namespace MarketUtils {
  export type MarketPricesStruct = {
    indexTokenPrice: Price.PropsStruct;
    longTokenPrice: Price.PropsStruct;
    shortTokenPrice: Price.PropsStruct;
  };

  export type MarketPricesStructOutput = [
    Price.PropsStructOutput,
    Price.PropsStructOutput,
    Price.PropsStructOutput
  ] & {
    indexTokenPrice: Price.PropsStructOutput;
    longTokenPrice: Price.PropsStructOutput;
    shortTokenPrice: Price.PropsStructOutput;
  };

  export type GetNextFundingAmountPerSizeResultStruct = {
    longsPayShorts: PromiseOrValue<boolean>;
    fundingAmountPerSize_LongCollateral_LongPosition: PromiseOrValue<BigNumberish>;
    fundingAmountPerSize_LongCollateral_ShortPosition: PromiseOrValue<BigNumberish>;
    fundingAmountPerSize_ShortCollateral_LongPosition: PromiseOrValue<BigNumberish>;
    fundingAmountPerSize_ShortCollateral_ShortPosition: PromiseOrValue<BigNumberish>;
  };

  export type GetNextFundingAmountPerSizeResultStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    longsPayShorts: boolean;
    fundingAmountPerSize_LongCollateral_LongPosition: BigNumber;
    fundingAmountPerSize_LongCollateral_ShortPosition: BigNumber;
    fundingAmountPerSize_ShortCollateral_LongPosition: BigNumber;
    fundingAmountPerSize_ShortCollateral_ShortPosition: BigNumber;
  };
}

export declare namespace Position {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    collateralToken: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [string, string, string] & {
    account: string;
    market: string;
    collateralToken: string;
  };

  export type NumbersStruct = {
    sizeInUsd: PromiseOrValue<BigNumberish>;
    sizeInTokens: PromiseOrValue<BigNumberish>;
    collateralAmount: PromiseOrValue<BigNumberish>;
    borrowingFactor: PromiseOrValue<BigNumberish>;
    longTokenFundingAmountPerSize: PromiseOrValue<BigNumberish>;
    shortTokenFundingAmountPerSize: PromiseOrValue<BigNumberish>;
    increasedAtBlock: PromiseOrValue<BigNumberish>;
    decreasedAtBlock: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    sizeInUsd: BigNumber;
    sizeInTokens: BigNumber;
    collateralAmount: BigNumber;
    borrowingFactor: BigNumber;
    longTokenFundingAmountPerSize: BigNumber;
    shortTokenFundingAmountPerSize: BigNumber;
    increasedAtBlock: BigNumber;
    decreasedAtBlock: BigNumber;
  };

  export type FlagsStruct = { isLong: PromiseOrValue<boolean> };

  export type FlagsStructOutput = [boolean] & { isLong: boolean };

  export type PropsStruct = {
    addresses: Position.AddressesStruct;
    numbers: Position.NumbersStruct;
    flags: Position.FlagsStruct;
  };

  export type PropsStructOutput = [
    Position.AddressesStructOutput,
    Position.NumbersStructOutput,
    Position.FlagsStructOutput
  ] & {
    addresses: Position.AddressesStructOutput;
    numbers: Position.NumbersStructOutput;
    flags: Position.FlagsStructOutput;
  };
}

export declare namespace PositionPricingUtils {
  export type PositionFundingFeesStruct = {
    fundingFeeAmount: PromiseOrValue<BigNumberish>;
    claimableLongTokenAmount: PromiseOrValue<BigNumberish>;
    claimableShortTokenAmount: PromiseOrValue<BigNumberish>;
    latestLongTokenFundingAmountPerSize: PromiseOrValue<BigNumberish>;
    latestShortTokenFundingAmountPerSize: PromiseOrValue<BigNumberish>;
    hasPendingLongTokenFundingFee: PromiseOrValue<boolean>;
    hasPendingShortTokenFundingFee: PromiseOrValue<boolean>;
  };

  export type PositionFundingFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    fundingFeeAmount: BigNumber;
    claimableLongTokenAmount: BigNumber;
    claimableShortTokenAmount: BigNumber;
    latestLongTokenFundingAmountPerSize: BigNumber;
    latestShortTokenFundingAmountPerSize: BigNumber;
    hasPendingLongTokenFundingFee: boolean;
    hasPendingShortTokenFundingFee: boolean;
  };

  export type PositionReferralFeesStruct = {
    affiliate: PromiseOrValue<string>;
    traderDiscountAmount: PromiseOrValue<BigNumberish>;
    affiliateRewardAmount: PromiseOrValue<BigNumberish>;
  };

  export type PositionReferralFeesStructOutput = [
    string,
    BigNumber,
    BigNumber
  ] & {
    affiliate: string;
    traderDiscountAmount: BigNumber;
    affiliateRewardAmount: BigNumber;
  };

  export type PositionFeesStruct = {
    referral: PositionPricingUtils.PositionReferralFeesStruct;
    funding: PositionPricingUtils.PositionFundingFeesStruct;
    feeReceiverAmount: PromiseOrValue<BigNumberish>;
    feeAmountForPool: PromiseOrValue<BigNumberish>;
    positionFeeAmountForPool: PromiseOrValue<BigNumberish>;
    positionFeeAmount: PromiseOrValue<BigNumberish>;
    borrowingFeeAmount: PromiseOrValue<BigNumberish>;
    totalNetCostAmount: PromiseOrValue<BigNumberish>;
    totalNetCostUsd: PromiseOrValue<BigNumberish>;
  };

  export type PositionFeesStructOutput = [
    PositionPricingUtils.PositionReferralFeesStructOutput,
    PositionPricingUtils.PositionFundingFeesStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    referral: PositionPricingUtils.PositionReferralFeesStructOutput;
    funding: PositionPricingUtils.PositionFundingFeesStructOutput;
    feeReceiverAmount: BigNumber;
    feeAmountForPool: BigNumber;
    positionFeeAmountForPool: BigNumber;
    positionFeeAmount: BigNumber;
    borrowingFeeAmount: BigNumber;
    totalNetCostAmount: BigNumber;
    totalNetCostUsd: BigNumber;
  };
}

export declare namespace Reader {
  export type PositionInfoStruct = {
    position: Position.PropsStruct;
    pendingBorrowingFees: PromiseOrValue<BigNumberish>;
    pendingFundingFees: PositionPricingUtils.PositionFundingFeesStruct;
  };

  export type PositionInfoStructOutput = [
    Position.PropsStructOutput,
    BigNumber,
    PositionPricingUtils.PositionFundingFeesStructOutput
  ] & {
    position: Position.PropsStructOutput;
    pendingBorrowingFees: BigNumber;
    pendingFundingFees: PositionPricingUtils.PositionFundingFeesStructOutput;
  };

  export type MarketInfoStruct = {
    market: Market.PropsStruct;
    borrowingFactorPerSecondForLongs: PromiseOrValue<BigNumberish>;
    borrowingFactorPerSecondForShorts: PromiseOrValue<BigNumberish>;
    funding: MarketUtils.GetNextFundingAmountPerSizeResultStruct;
  };

  export type MarketInfoStructOutput = [
    Market.PropsStructOutput,
    BigNumber,
    BigNumber,
    MarketUtils.GetNextFundingAmountPerSizeResultStructOutput
  ] & {
    market: Market.PropsStructOutput;
    borrowingFactorPerSecondForLongs: BigNumber;
    borrowingFactorPerSecondForShorts: BigNumber;
    funding: MarketUtils.GetNextFundingAmountPerSizeResultStructOutput;
  };
}

export declare namespace Deposit {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    initialLongTokenAmount: PromiseOrValue<BigNumberish>;
    initialShortTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    initialLongTokenAmount: BigNumber;
    initialShortTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtBlock: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: Deposit.AddressesStruct;
    numbers: Deposit.NumbersStruct;
    flags: Deposit.FlagsStruct;
  };

  export type PropsStructOutput = [
    Deposit.AddressesStructOutput,
    Deposit.NumbersStructOutput,
    Deposit.FlagsStructOutput
  ] & {
    addresses: Deposit.AddressesStructOutput;
    numbers: Deposit.NumbersStructOutput;
    flags: Deposit.FlagsStructOutput;
  };
}

export declare namespace Market {
  export type PropsStruct = {
    marketToken: PromiseOrValue<string>;
    indexToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
  };

  export type PropsStructOutput = [string, string, string, string] & {
    marketToken: string;
    indexToken: string;
    longToken: string;
    shortToken: string;
  };
}

export declare namespace Withdrawal {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marketTokenAmount: BigNumber;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    updatedAtBlock: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: Withdrawal.AddressesStruct;
    numbers: Withdrawal.NumbersStruct;
    flags: Withdrawal.FlagsStruct;
  };

  export type PropsStructOutput = [
    Withdrawal.AddressesStructOutput,
    Withdrawal.NumbersStructOutput,
    Withdrawal.FlagsStructOutput
  ] & {
    addresses: Withdrawal.AddressesStructOutput;
    numbers: Withdrawal.NumbersStructOutput;
    flags: Withdrawal.FlagsStructOutput;
  };
}

export interface ReaderInterface extends utils.Interface {
  functions: {
    "getAccountOrders(address,address,uint256,uint256)": FunctionFragment;
    "getAccountPositionInfoList(address,bytes32[],((uint256,uint256),(uint256,uint256),(uint256,uint256))[])": FunctionFragment;
    "getAccountPositions(address,address,uint256,uint256)": FunctionFragment;
    "getDeposit(address,bytes32)": FunctionFragment;
    "getMarket(address,address)": FunctionFragment;
    "getMarketInfo(address,((uint256,uint256),(uint256,uint256),(uint256,uint256)),address)": FunctionFragment;
    "getMarketInfoList(address,((uint256,uint256),(uint256,uint256),(uint256,uint256))[],uint256,uint256)": FunctionFragment;
    "getMarketTokenPrice(address,(address,address,address,address),(uint256,uint256),(uint256,uint256),(uint256,uint256),bytes32,bool)": FunctionFragment;
    "getMarkets(address,uint256,uint256)": FunctionFragment;
    "getNetPnl(address,address,address,address,(uint256,uint256),bool)": FunctionFragment;
    "getOpenInterestWithPnl(address,address,address,address,(uint256,uint256),bool,bool)": FunctionFragment;
    "getOrder(address,bytes32)": FunctionFragment;
    "getPnl(address,address,address,address,(uint256,uint256),bool,bool)": FunctionFragment;
    "getPnlToPoolFactor(address,address,((uint256,uint256),(uint256,uint256),(uint256,uint256)),bool,bool)": FunctionFragment;
    "getPosition(address,bytes32)": FunctionFragment;
    "getPositionFees(address,address,bytes32,(uint256,uint256),address,address,uint256)": FunctionFragment;
    "getPositionInfo(address,bytes32,((uint256,uint256),(uint256,uint256),(uint256,uint256)))": FunctionFragment;
    "getWithdrawal(address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccountOrders"
      | "getAccountPositionInfoList"
      | "getAccountPositions"
      | "getDeposit"
      | "getMarket"
      | "getMarketInfo"
      | "getMarketInfoList"
      | "getMarketTokenPrice"
      | "getMarkets"
      | "getNetPnl"
      | "getOpenInterestWithPnl"
      | "getOrder"
      | "getPnl"
      | "getPnlToPoolFactor"
      | "getPosition"
      | "getPositionFees"
      | "getPositionInfo"
      | "getWithdrawal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountOrders",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountPositionInfoList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      MarketUtils.MarketPricesStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountPositions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfo",
    values: [
      PromiseOrValue<string>,
      MarketUtils.MarketPricesStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfoList",
    values: [
      PromiseOrValue<string>,
      MarketUtils.MarketPricesStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketTokenPrice",
    values: [
      PromiseOrValue<string>,
      Market.PropsStruct,
      Price.PropsStruct,
      Price.PropsStruct,
      Price.PropsStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetPnl",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      Price.PropsStruct,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenInterestWithPnl",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      Price.PropsStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPnl",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      Price.PropsStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPnlToPoolFactor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      MarketUtils.MarketPricesStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      Price.PropsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      MarketUtils.MarketPricesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountPositionInfoList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfoList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNetPnl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOpenInterestWithPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPnl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPnlToPoolFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawal",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Reader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountOrders(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Order.PropsStructOutput[]]>;

    getAccountPositionInfoList(
      dataStore: PromiseOrValue<string>,
      positionKeys: PromiseOrValue<BytesLike>[],
      prices: MarketUtils.MarketPricesStruct[],
      overrides?: CallOverrides
    ): Promise<[Reader.PositionInfoStructOutput[]]>;

    getAccountPositions(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Position.PropsStructOutput[]]>;

    getDeposit(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Deposit.PropsStructOutput]>;

    getMarket(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Market.PropsStructOutput]>;

    getMarketInfo(
      dataStore: PromiseOrValue<string>,
      prices: MarketUtils.MarketPricesStruct,
      marketKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Reader.MarketInfoStructOutput]>;

    getMarketInfoList(
      dataStore: PromiseOrValue<string>,
      marketPricesList: MarketUtils.MarketPricesStruct[],
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Reader.MarketInfoStructOutput[]]>;

    getMarketTokenPrice(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      pnlFactorType: PromiseOrValue<BytesLike>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarkets(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Market.PropsStructOutput[]]>;

    getNetPnl(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      indexTokenPrice: Price.PropsStruct,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpenInterestWithPnl(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      indexTokenPrice: Price.PropsStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrder(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Order.PropsStructOutput]>;

    getPnl(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      indexTokenPrice: Price.PropsStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPnlToPoolFactor(
      dataStore: PromiseOrValue<string>,
      marketAddress: PromiseOrValue<string>,
      prices: MarketUtils.MarketPricesStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPosition(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Position.PropsStructOutput]>;

    getPositionFees(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      positionKey: PromiseOrValue<BytesLike>,
      collateralTokenPrice: Price.PropsStruct,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PositionPricingUtils.PositionFeesStructOutput]>;

    getPositionInfo(
      dataStore: PromiseOrValue<string>,
      positionKey: PromiseOrValue<BytesLike>,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<[Reader.PositionInfoStructOutput]>;

    getWithdrawal(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Withdrawal.PropsStructOutput]>;
  };

  getAccountOrders(
    dataStore: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Order.PropsStructOutput[]>;

  getAccountPositionInfoList(
    dataStore: PromiseOrValue<string>,
    positionKeys: PromiseOrValue<BytesLike>[],
    prices: MarketUtils.MarketPricesStruct[],
    overrides?: CallOverrides
  ): Promise<Reader.PositionInfoStructOutput[]>;

  getAccountPositions(
    dataStore: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Position.PropsStructOutput[]>;

  getDeposit(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Deposit.PropsStructOutput>;

  getMarket(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Market.PropsStructOutput>;

  getMarketInfo(
    dataStore: PromiseOrValue<string>,
    prices: MarketUtils.MarketPricesStruct,
    marketKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Reader.MarketInfoStructOutput>;

  getMarketInfoList(
    dataStore: PromiseOrValue<string>,
    marketPricesList: MarketUtils.MarketPricesStruct[],
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Reader.MarketInfoStructOutput[]>;

  getMarketTokenPrice(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    indexTokenPrice: Price.PropsStruct,
    longTokenPrice: Price.PropsStruct,
    shortTokenPrice: Price.PropsStruct,
    pnlFactorType: PromiseOrValue<BytesLike>,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarkets(
    dataStore: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Market.PropsStructOutput[]>;

  getNetPnl(
    dataStore: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    longToken: PromiseOrValue<string>,
    shortToken: PromiseOrValue<string>,
    indexTokenPrice: Price.PropsStruct,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpenInterestWithPnl(
    dataStore: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    longToken: PromiseOrValue<string>,
    shortToken: PromiseOrValue<string>,
    indexTokenPrice: Price.PropsStruct,
    isLong: PromiseOrValue<boolean>,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrder(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Order.PropsStructOutput>;

  getPnl(
    dataStore: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    longToken: PromiseOrValue<string>,
    shortToken: PromiseOrValue<string>,
    indexTokenPrice: Price.PropsStruct,
    isLong: PromiseOrValue<boolean>,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPnlToPoolFactor(
    dataStore: PromiseOrValue<string>,
    marketAddress: PromiseOrValue<string>,
    prices: MarketUtils.MarketPricesStruct,
    isLong: PromiseOrValue<boolean>,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPosition(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Position.PropsStructOutput>;

  getPositionFees(
    dataStore: PromiseOrValue<string>,
    referralStorage: PromiseOrValue<string>,
    positionKey: PromiseOrValue<BytesLike>,
    collateralTokenPrice: Price.PropsStruct,
    longToken: PromiseOrValue<string>,
    shortToken: PromiseOrValue<string>,
    sizeDeltaUsd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PositionPricingUtils.PositionFeesStructOutput>;

  getPositionInfo(
    dataStore: PromiseOrValue<string>,
    positionKey: PromiseOrValue<BytesLike>,
    prices: MarketUtils.MarketPricesStruct,
    overrides?: CallOverrides
  ): Promise<Reader.PositionInfoStructOutput>;

  getWithdrawal(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Withdrawal.PropsStructOutput>;

  callStatic: {
    getAccountOrders(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Order.PropsStructOutput[]>;

    getAccountPositionInfoList(
      dataStore: PromiseOrValue<string>,
      positionKeys: PromiseOrValue<BytesLike>[],
      prices: MarketUtils.MarketPricesStruct[],
      overrides?: CallOverrides
    ): Promise<Reader.PositionInfoStructOutput[]>;

    getAccountPositions(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Position.PropsStructOutput[]>;

    getDeposit(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Deposit.PropsStructOutput>;

    getMarket(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Market.PropsStructOutput>;

    getMarketInfo(
      dataStore: PromiseOrValue<string>,
      prices: MarketUtils.MarketPricesStruct,
      marketKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Reader.MarketInfoStructOutput>;

    getMarketInfoList(
      dataStore: PromiseOrValue<string>,
      marketPricesList: MarketUtils.MarketPricesStruct[],
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Reader.MarketInfoStructOutput[]>;

    getMarketTokenPrice(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      pnlFactorType: PromiseOrValue<BytesLike>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkets(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Market.PropsStructOutput[]>;

    getNetPnl(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      indexTokenPrice: Price.PropsStruct,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenInterestWithPnl(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      indexTokenPrice: Price.PropsStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrder(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Order.PropsStructOutput>;

    getPnl(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      indexTokenPrice: Price.PropsStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPnlToPoolFactor(
      dataStore: PromiseOrValue<string>,
      marketAddress: PromiseOrValue<string>,
      prices: MarketUtils.MarketPricesStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Position.PropsStructOutput>;

    getPositionFees(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      positionKey: PromiseOrValue<BytesLike>,
      collateralTokenPrice: Price.PropsStruct,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PositionPricingUtils.PositionFeesStructOutput>;

    getPositionInfo(
      dataStore: PromiseOrValue<string>,
      positionKey: PromiseOrValue<BytesLike>,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<Reader.PositionInfoStructOutput>;

    getWithdrawal(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Withdrawal.PropsStructOutput>;
  };

  filters: {};

  estimateGas: {
    getAccountOrders(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountPositionInfoList(
      dataStore: PromiseOrValue<string>,
      positionKeys: PromiseOrValue<BytesLike>[],
      prices: MarketUtils.MarketPricesStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountPositions(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeposit(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarket(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInfo(
      dataStore: PromiseOrValue<string>,
      prices: MarketUtils.MarketPricesStruct,
      marketKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInfoList(
      dataStore: PromiseOrValue<string>,
      marketPricesList: MarketUtils.MarketPricesStruct[],
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTokenPrice(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      pnlFactorType: PromiseOrValue<BytesLike>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkets(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetPnl(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      indexTokenPrice: Price.PropsStruct,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenInterestWithPnl(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      indexTokenPrice: Price.PropsStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrder(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPnl(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      indexTokenPrice: Price.PropsStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPnlToPoolFactor(
      dataStore: PromiseOrValue<string>,
      marketAddress: PromiseOrValue<string>,
      prices: MarketUtils.MarketPricesStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionFees(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      positionKey: PromiseOrValue<BytesLike>,
      collateralTokenPrice: Price.PropsStruct,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionInfo(
      dataStore: PromiseOrValue<string>,
      positionKey: PromiseOrValue<BytesLike>,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawal(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountOrders(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountPositionInfoList(
      dataStore: PromiseOrValue<string>,
      positionKeys: PromiseOrValue<BytesLike>[],
      prices: MarketUtils.MarketPricesStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountPositions(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeposit(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarket(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInfo(
      dataStore: PromiseOrValue<string>,
      prices: MarketUtils.MarketPricesStruct,
      marketKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInfoList(
      dataStore: PromiseOrValue<string>,
      marketPricesList: MarketUtils.MarketPricesStruct[],
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketTokenPrice(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      pnlFactorType: PromiseOrValue<BytesLike>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarkets(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetPnl(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      indexTokenPrice: Price.PropsStruct,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenInterestWithPnl(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      indexTokenPrice: Price.PropsStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPnl(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      indexTokenPrice: Price.PropsStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPnlToPoolFactor(
      dataStore: PromiseOrValue<string>,
      marketAddress: PromiseOrValue<string>,
      prices: MarketUtils.MarketPricesStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionFees(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      positionKey: PromiseOrValue<BytesLike>,
      collateralTokenPrice: Price.PropsStruct,
      longToken: PromiseOrValue<string>,
      shortToken: PromiseOrValue<string>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionInfo(
      dataStore: PromiseOrValue<string>,
      positionKey: PromiseOrValue<BytesLike>,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawal(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
