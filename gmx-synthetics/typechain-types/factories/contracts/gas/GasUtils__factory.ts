/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  GasUtils,
  GasUtilsInterface,
} from "../../../contracts/gas/GasUtils";

const _abi = [
  {
    inputs: [],
    name: "EmptyHoldingAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minExecutionFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "executionFee",
        type: "uint256",
      },
    ],
    name: "InsufficientExecutionFee",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "keeper",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "KeeperExecutionFee",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "UserRefundFee",
    type: "event",
  },
];

const _bytecode =
  "0x61061d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80635a3911ca1461003a575b600080fd5b81801561004657600080fd5b5061005a6100553660046104b2565b61005c565b005b60005a6100699085610538565b905060003a61007889846101eb565b610082919061054b565b90508581111561008f5750845b604051633510f2a560e21b81526001600160a01b0388169063d443ca94906100bd908790859060040161056a565b600060405180830381600087803b1580156100d757600080fd5b505af11580156100eb573d6000803e3d6000fd5b505050507f57682c67f387deb1f0c7917d296d25f2c33b00578a1797dfbbf96bfb094d3ada848260405161012092919061056a565b60405180910390a160006101348288610538565b905080600003610146575050506101e3565b604051633510f2a560e21b81526001600160a01b0389169063d443ca9490610174908790859060040161056a565b600060405180830381600087803b15801561018e57600080fd5b505af11580156101a2573d6000803e3d6000fd5b505050507fc17d2b183ce4ddd0bd86090ef0c96ec1102448244a081e38deb95d2ec22612aa84826040516101d792919061056a565b60405180910390a15050505b505050505050565b600080836001600160a01b031663bd02d0f560405160200161023e906020808252601d908201527f455845435554494f4e5f4741535f4645455f424153455f414d4f554e54000000604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161027291815260200190565b602060405180830381865afa15801561028f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b39190610583565b90506000846001600160a01b031663bd02d0f56040516020016103139060208082526023908201527f455845435554494f4e5f4741535f4645455f4d554c5449504c4945525f4641436040820152622a27a960e91b606082015260800190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161034791815260200190565b602060405180830381865afa158015610364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103889190610583565b9050600061039685836103ac565b6103a0908461059c565b93505050505b92915050565b60008060006103bb858561044f565b9150915081156103e4576103db68327cb2734119d3b7a9601e1b826105c5565b925050506103a6565b6000808587116103f55785876103f8565b86865b909250905061041c68056bc75e2d6310000068327cb2734119d3b7a9601e1b6105c5565b8161043068056bc75e2d63100000856105c5565b61043a919061054b565b61044491906105c5565b979650505050505050565b600080836000036104665750600190506000610493565b83830283858281610479576104796105af565b041461048c576000809250925050610493565b6001925090505b9250929050565b6001600160a01b03811681146104af57600080fd5b50565b60008060008060008060c087890312156104cb57600080fd5b86356104d68161049a565b955060208701356104e68161049a565b9450604087013593506060870135925060808701356105048161049a565b915060a08701356105148161049a565b809150509295509295509295565b634e487b7160e01b600052601160045260246000fd5b818103818111156103a6576103a6610522565b600081600019048311821515161561056557610565610522565b500290565b6001600160a01b03929092168252602082015260400190565b60006020828403121561059557600080fd5b5051919050565b808201808211156103a6576103a6610522565b634e487b7160e01b600052601260045260246000fd5b6000826105e257634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220f05ca9f1f9890636a4876d83a9896162406f30314f611a786b79c2a857c32eb764736f6c63430008100033";

type GasUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GasUtils__factory extends ContractFactory {
  constructor(...args: GasUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GasUtils> {
    return super.deploy(overrides || {}) as Promise<GasUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GasUtils {
    return super.attach(address) as GasUtils;
  }
  override connect(signer: Signer): GasUtils__factory {
    return super.connect(signer) as GasUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasUtilsInterface {
    return new utils.Interface(_abi) as GasUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GasUtils {
    return new Contract(address, _abi, signerOrProvider) as GasUtils;
  }
}
