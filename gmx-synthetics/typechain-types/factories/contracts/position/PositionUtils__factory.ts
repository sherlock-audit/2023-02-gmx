/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PositionUtils,
  PositionUtilsInterface,
} from "../../../contracts/position/PositionUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "sizeInUsd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sizeInTokens",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collateralAmount",
        type: "uint256",
      },
    ],
    name: "EmptyPosition",
    type: "error",
  },
  {
    inputs: [],
    name: "LiquidatablePosition",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__Exp2InputTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__LogInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivFixedPointOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "UnableToGetCachedTokenPrice",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "positionBorrowingFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "cumulativeBorrowingFactor",
        type: "uint256",
      },
    ],
    name: "UnexpectedBorrowingFactor",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "usdDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "longOpenInterest",
        type: "uint256",
      },
    ],
    name: "UsdDeltaExceedsLongOpenInterest",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "usdDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "shortOpenInterest",
        type: "uint256",
      },
    ],
    name: "UsdDeltaExceedsShortOpenInterest",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "address",
                name: "market",
                type: "address",
              },
              {
                internalType: "address",
                name: "collateralToken",
                type: "address",
              },
            ],
            internalType: "struct Position.Addresses",
            name: "addresses",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "sizeInUsd",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "sizeInTokens",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "collateralAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowingFactor",
                type: "uint256",
              },
              {
                internalType: "int256",
                name: "longTokenFundingAmountPerSize",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "shortTokenFundingAmountPerSize",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "increasedAtBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "decreasedAtBlock",
                type: "uint256",
              },
            ],
            internalType: "struct Position.Numbers",
            name: "numbers",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "isLong",
                type: "bool",
              },
            ],
            internalType: "struct Position.Flags",
            name: "flags",
            type: "tuple",
          },
        ],
        internalType: "struct Position.Props",
        name: "position",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "indexTokenPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sizeDeltaUsd",
        type: "uint256",
      },
    ],
    name: "getPositionPnlUsd",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        internalType: "contract IReferralStorage",
        name: "referralStorage",
        type: "IReferralStorage",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "address",
                name: "market",
                type: "address",
              },
              {
                internalType: "address",
                name: "collateralToken",
                type: "address",
              },
            ],
            internalType: "struct Position.Addresses",
            name: "addresses",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "sizeInUsd",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "sizeInTokens",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "collateralAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowingFactor",
                type: "uint256",
              },
              {
                internalType: "int256",
                name: "longTokenFundingAmountPerSize",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "shortTokenFundingAmountPerSize",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "increasedAtBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "decreasedAtBlock",
                type: "uint256",
              },
            ],
            internalType: "struct Position.Numbers",
            name: "numbers",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "isLong",
                type: "bool",
              },
            ],
            internalType: "struct Position.Flags",
            name: "flags",
            type: "tuple",
          },
        ],
        internalType: "struct Position.Props",
        name: "position",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "shouldValidateMinCollateralUsd",
        type: "bool",
      },
    ],
    name: "isPositionLiquidatable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        internalType: "contract IReferralStorage",
        name: "referralStorage",
        type: "IReferralStorage",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "address",
                name: "market",
                type: "address",
              },
              {
                internalType: "address",
                name: "collateralToken",
                type: "address",
              },
            ],
            internalType: "struct Position.Addresses",
            name: "addresses",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "sizeInUsd",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "sizeInTokens",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "collateralAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowingFactor",
                type: "uint256",
              },
              {
                internalType: "int256",
                name: "longTokenFundingAmountPerSize",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "shortTokenFundingAmountPerSize",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "increasedAtBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "decreasedAtBlock",
                type: "uint256",
              },
            ],
            internalType: "struct Position.Numbers",
            name: "numbers",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "isLong",
                type: "bool",
              },
            ],
            internalType: "struct Position.Flags",
            name: "flags",
            type: "tuple",
          },
        ],
        internalType: "struct Position.Props",
        name: "position",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "shouldValidateMinCollateralUsd",
        type: "bool",
      },
    ],
    name: "validatePosition",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "collateralToken",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isLong",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "positionSizeInUsd",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "positionCollateralAmount",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "positionPnlUsd",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "realizedPnlUsd",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "openInterestDelta",
            type: "int256",
          },
        ],
        internalType:
          "struct PositionUtils.WillPositionCollateralBeSufficientValues",
        name: "values",
        type: "tuple",
      },
    ],
    name: "willPositionCollateralBeSufficient",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61390061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80633beb68221461005b57806387b5cfbc14610070578063dac648571461009a578063f8b56334146100c4575b600080fd5b61006e6100693660046134f9565b6100e7565b005b61008361007e366004613578565b610124565b6040516100919291906135e7565b60405180910390f35b6100ad6100a83660046135f5565b61047a565b604080519215158352602083019190915201610091565b6100d76100d23660046134f9565b610546565b6040519015158152602001610091565b6100f0846108bc565b6100fe868686868686610546565b1561011c57604051637bc1335160e11b815260040160405180910390fd5b505050505050565b600080610186604051806101400160405280600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6101a88561019988602090810151015190565b6101a391906136cf565b610929565b81526040860151516101d45780516101c56101a388602001515190565b6101cf91906136ee565b6101ef565b6101e36101a387602001515190565b81516101ef91906136ee565b60208201819052600012156103a257604086015151610212578760600151610218565b87604001515b6001600160a01b0316604082018190528851610236918b9190610997565b606082015260408601515161025057604087015151610257565b6020870151515b60808201819052606082015161026d91906136cf565b60a08201528751604089015160608a015161029a928c929091896102938c604001515190565b6001610a1b565b60c08201528751604087015151610310918b918460c001518560a001516040516020016102f5906020808252601a90820152794d41585f504e4c5f464143544f525f464f525f5452414445525360301b604082015260600190565b60405160208183030381529060405280519060200120610a50565b60e0820181905260c08201511480159061032e575060008160e00151135b801561033e575060008160c00151135b156103a257610354670de0b6b3a7640000610929565b8160c00151610363919061372b565b610374670de0b6b3a7640000610929565b8260e00151610383919061372b565b82602001516103929190613759565b61039c919061372b565b60208201525b836103af87602001515190565b036103c85760208087015101515b610100820152610422565b604086015151156103fb576103bd846103e688602090810151015190565b6103f091906136cf565b602088015151610a9e565b60208681015180519101516104119086906136cf565b61041b91906137de565b6101008201525b602080870151015161043390610929565b610441826101000151610929565b82602001516104509190613759565b61045a919061372b565b61012082018190526101009091015190925090505b965096945050505050565b600080600061048a868989610aca565b905060006104ac8a8a600001518b604001518c6060015189608001518b610b82565b905060006104bd8360000151610929565b6104ca8760200151610929565b6104d49190613759565b90508560400151816104e691906137f2565b905060008660600151121561050757606086015161050490826137f2565b90505b600081121561051e5760009450925061046f915050565b60006105316101a3886000015185610bb5565b8212159c919b50909950505050505050505050565b60006105886040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6105b3888686896105a861059e8c604001515190565b8a51906000610c4d565b60208c015151610124565b50815284516105c3908990610c86565b602082015260006105e06105d988516040015190565b8787610aca565b80519091506105f488602001516040015190565b6105fe91906136cf565b8260400181815250506106a26040518060e001604052808b6001600160a01b0316815260200188600001516001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b0316815260200188606001516001600160a01b0316815260200161067f6101a38b602001515190565b6106889061381a565b81526020016106998a604001515190565b15159052610cff565b60608301819052600012156106bd576000606083015261070b565b60006106cd8a8860000151610dc7565b905060006106e96101a36106e38b602001515190565b84610bb5565b6106f29061381a565b9050808460600151121561070857606084018190525b50505b600061072f8a8a8a858b604001518c6060015161072a8f602001515190565b610de1565b905061073f816101000151610929565b60608401518451604086015161075490610929565b61075e91906137f2565b61076891906137f2565b61077291906136ee565b60c084015284156108585761083a8a6001600160a01b031663bd02d0f56040516020016107c59060208082526012908201527113525397d0d3d31310551154905317d554d160721b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016107f991815260200190565b602060405180830381865afa158015610816573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a39190613836565b6080840181905260c0840151121561085857600193505050506108b2565b60008360c001511361087057600193505050506108b2565b61088c6101a36108828a602001515190565b8560200151610bb5565b60a0840181905260c084015112156108aa57600193505050506108b2565b600093505050505b9695505050505050565b60208101515115806108d357506020808201510151155b806108e45750602081015160400151155b156109265760208181015180519181015160409182015191516338b3364f60e21b81526004810193909352602483015260448201526064015b60405180910390fd5b50565b60006001600160ff1b038211156109935760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161091d565b5090565b6000836001600160a01b031663bd02d0f56109b28585611036565b6040518263ffffffff1660e01b81526004016109d091815260200190565b602060405180830381865afa1580156109ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190613836565b90505b9392505050565b6040805180820190915283815260208101849052600090610a41898989898589896110be565b9150505b979650505050505050565b600080841215610a615750826108b2565b6000610a6f88848989611150565b90506000610a806101a38684610bb5565b9050808613610a8f5785610a91565b805b9998505050505050505050565b6000816001610aad828661384f565b610ab79190613862565b610ac191906137de565b90505b92915050565b604080518082019091526000808252602082015282604001516001600160a01b0316846001600160a01b031603610b0657506020810151610a14565b82606001516001600160a01b0316846001600160a01b031603610b2e57506040810151610a14565b82602001516001600160a01b0316846001600160a01b031603610b5357508051610a14565b8251604051635f2394d160e11b81526001600160a01b038087166004830152909116602482015260440161091d565b600080610b9288888888876111d4565b9050610b9e818561120b565b90506000610bad898986611242565b9050610a9182825b6000806000610bc4858561125d565b915091508115610bed57610be468327cb2734119d3b7a9601e1b826137de565b92505050610ac4565b600080858711610bfe578587610c01565b86865b9092509050610c2568056bc75e2d6310000068327cb2734119d3b7a9601e1b6137de565b81610c3968056bc75e2d63100000856137de565b610c4391906136cf565b610a4591906137de565b60008215610c6e5781610c61578351610c67565b83602001515b9050610a14565b81610c7d578360200151610a11565b50509051919050565b6000826001600160a01b031663bd02d0f5610ca0846112a8565b6040518263ffffffff1660e01b8152600401610cbe91815260200190565b602060405180830381865afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190613836565b600080610d0b8361132e565b90506000610d22846000015185602001518461138d565b905060008112610d33579392505050565b600080610d48866000015187604001516115f4565b9150915081610d5b575090949350505050565b6000610d6687611709565b90506000610d7d886000015189602001518461138d565b90506000610d97610d918a60a00151611763565b85611774565b905080821315610dae575093979650505050505050565b858212610dbb5785610a91565b50979650505050505050565b6000826001600160a01b031663bd02d0f5610ca0846117b3565b610de9613063565b610df1613063565b610e0c898988610e008b515190565b8b51602001518861180a565b855160808701919091526040808701929092529081019190915260208101919091526001600160a01b0390911690528551610e478a89611a6c565b610e5191906137de565b60c08201526040516000906001600160a01b038b169063bd02d0f590610eab906020016020808252601d908201527f424f52524f57494e475f4645455f52454345495645525f464143544f52000000604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610edf91815260200190565b602060405180830381865afa158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f209190613836565b90506000610f328360c0015183610bb5565b9050808360c001518460800151610f49919061384f565b610f539190613862565b6060840152604083018051829190610f6c90839061384f565b9052506000610f938c610f818c516020015190565b8a610f8e8e604001515190565b611af9565b90506000610fb48d610fa78d516020015190565b8a610f8e8f604001515190565b9050610fc38b8a8a8585611b15565b6020860181905260c086015190516080870151604080890151895190910151610fec919061384f565b610ff6919061384f565b611000919061384f565b61100a919061384f565b60e0860181905260208b015161101f916136cf565b61010086015250929b9a5050505050505050505050565b6000604051602001611067906020808252600b908201526a1413d3d317d05353d5539560aa1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b0380861691830191909152831660608201526080015b60405160208183030381529060405280519060200120905092915050565b6000806110d16101a38a8a8a8a896111d4565b905060006110e28a8a8a8a89611c3e565b90508115806110ef575080155b156110ff57600092505050610a45565b600061110c878787610c4d565b9050600061111d6101a383856136cf565b90506000876111355761113082866136ee565b61113f565b61113f85836136ee565b9d9c50505050505050505050505050565b6000846001600160a01b031663bd02d0f561116c868686611c5d565b6040518263ffffffff1660e01b815260040161118a91815260200190565b602060405180830381865afa1580156111a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cb9190613836565b95945050505050565b6000806111e387878786611cec565b905060006111f388888787611cec565b90506111ff818361384f565b98975050505050505050565b60008082131561122f5761121e82611763565b611228908461384f565b9050610ac4565b61123882611763565b610ac19084613862565b6000836001600160a01b031663bd02d0f56109b28585611d08565b6000808360000361127457506001905060006112a1565b8383028385828161128757611287613715565b041461129a5760008092509250506112a1565b6001925090505b9250929050565b60006040516020016112e39060208082526015908201527426a4a72fa1a7a62620aa22a920a62fa320a1aa27a960591b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b038416908201526060015b604051602081830303815290604052805190602001209050919050565b6113366130cf565b6000611356836000015184602001518560600151866080015160016111d4565b90506000611378846000015185602001518660600151876080015160006111d4565b9050611385848383611da0565b949350505050565b6000806113a283600001518460200151611e91565b905060006113b884604001518560600151611e91565b6060850151604086015160208701518751939450909211159111151460006001600160a01b03881663bd02d0f56113ee89611eb3565b6040518263ffffffff1660e01b815260040161140c91815260200190565b602060405180830381865afa158015611429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144d9190613836565b905081156114ed5783831060006001600160a01b038a1663bd02d0f56114738b85611ef6565b6040518263ffffffff1660e01b815260040161149191815260200190565b602060405180830381865afa1580156114ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d29190613836565b90506114e086868386611f32565b9650505050505050610a14565b6000886001600160a01b031663bd02d0f56115098a6001611ef6565b6040518263ffffffff1660e01b815260040161152791815260200190565b602060405180830381865afa158015611544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115689190613836565b90506000896001600160a01b031663bd02d0f56115868b6000611ef6565b6040518263ffffffff1660e01b81526004016115a491815260200190565b602060405180830381865afa1580156115c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e59190613836565b90506114e08686848487611f64565b6000806000846001600160a01b031663a6ed563e61161186611fad565b6040518263ffffffff1660e01b815260040161162f91815260200190565b602060405180830381865afa15801561164c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116709190613836565b9050806116845760008092509250506112a1565b6001856001600160a01b031663dc97d96261169e84611fe3565b6040518263ffffffff1660e01b81526004016116bc91815260200190565b602060405180830381865afa1580156116d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fd9190613836565b92509250509250929050565b6117116130cf565b60006117258360000151846040015161206d565b91505060008060008313156117445761173d83612117565b9050611758565b6117556117508461381a565b612117565b91505b6111cb858383611da0565b600080821215610993575060000390565b6000806117898461178485611763565b610bb5565b9050600083136117aa5761179c81610929565b6117a59061381a565b611385565b61138581610929565b60006040516020016112e3906020808252602b908201527f4d41585f504f534954494f4e5f494d504143545f464143544f525f464f525f4c60408201526a49515549444154494f4e5360a81b606082015260800190565b600080600080600061181a6130f7565b6118248b8a612169565b8351604081019190915260208101919091526001600160a01b0391821690528c1663bd02d0f56118538a6123d5565b6040518263ffffffff1660e01b815260040161187191815260200190565b602060405180830381865afa15801561188e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b29190613836565b602082018190528a51906118c7908990610bb5565b6118d191906137de565b604082018190528151602001516118e89190610bb5565b81516060908101919091528151908101516040909101516119099190610bb5565b815160809081019190915281519081015160609091015161192a9190613862565b815160a0015280516060015160408201516119459190613862565b60608201526040516001600160a01b038d169063bd02d0f59061199b906020016020808252601c908201527b2827a9a4aa24a7a72fa322a2afa922a1a2a4ab22a92fa320a1aa27a960211b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016119cf91815260200190565b602060405180830381865afa1580156119ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a109190613836565b608082018190526060820151611a2591610bb5565b60a082018190526060820151611a3b9190613862565b60c0820181905281518051608082015160a0928301519290940151909f939e50909c509a5098509650505050505050565b600080611a8a84611a7f85516020015190565b60408601515161240e565b905080611a9c84602001516060015190565b1115611ac75760208301516060015181604051634cd96ac160e11b815260040161091d9291906135e7565b6000611ad884602001516060015190565b611ae29083613862565b90506111cb611af385602001515190565b82610bb5565b6000846001600160a01b031663dc97d96261116c868686612429565b611b1d613174565b611b25613174565b6060810184905260808101839052600080611b5486611b498b602001516080015190565b60208c0151516124ab565b90151560a08501526080840151909250611b7790611b498b6020015160a0015190565b90151560c085015290506000821215611b9c57611b966117508361381a565b60208401525b6000811215611bb757611bb16117508261381a565b60408401525b876001600160a01b0316611bcd8a516040015190565b6001600160a01b0316148015611be35750600082135b15611bf457611bf182612117565b83525b866001600160a01b0316611c0a8a516040015190565b6001600160a01b0316148015611c205750600081135b15611c3157611c2e81612117565b83525b5090979650505050505050565b600080611c4d878787866124e2565b905060006111f3888887876124e2565b6000604051602001611c91906020808252600e908201526d26a0ac2fa827262fa320a1aa27a960911b604082015260600190565b60408051601f1981840301815282825280516020918201209083015281018590526001600160a01b0384166060820152821515608082015260a0015b6040516020818303038152906040528051906020012090509392505050565b6000846001600160a01b031663bd02d0f561116c8686866124fe565b6000604051602001611d669060208082526032908201527f4d494e5f434f4c4c41544552414c5f464143544f525f464f525f4f50454e5f49604082015271272a22a922a9aa2fa6aaa62a24a82624a2a960711b606082015260800190565b60408051601f198184030181528282528051602091820120908301526001600160a01b0385169082015282151560608201526080016110a0565b611da86130cf565b6000808560c0015115611e135760008660a00151128015611dd8575084611dd68760a001516117509061381a565b115b15611dfe578560a001518560405163756d7c9d60e11b815260040161091d9291906135e7565b611e0c858760a0015161120b565b9150611e6d565b60008660a00151128015611e36575083611e348760a001516117509061381a565b115b15611e5c578560a001518460405163022bc34560e61b815260040161091d9291906135e7565b611e6a848760a0015161120b565b90505b60408051608081018252958652602086019490945292840152506060820152919050565b6000818311611ea957611ea48383613862565b610ac1565b610ac18284613862565b60006040516020016112e3906020808252601f908201527f504f534954494f4e5f494d504143545f4558504f4e454e545f464143544f5200604082015260600190565b6000604051602001611d66906020808252601690820152752827a9a4aa24a7a72fa4a6a820a1aa2fa320a1aa27a960511b604082015260600190565b600084841081611f56611f46888787612531565b611f51888888612531565b611e91565b905060006111ff8284612556565b600080611f72878685612531565b90506000611f81878686612531565b90506000611f8f8383611e91565b90506000611f9f82848611612556565b9a9950505050505050505050565b60006040516020016112e39060208082526010908201526f1592549515505317d513d2d15397d25160821b604082015260600190565b60006040516020016120459060208082526036908201527f5448524553484f4c445f504f534954494f4e5f494d504143545f464143544f526040820152755f464f525f5649525455414c5f494e56454e544f525960501b606082015260800190565b60405160208183030381529060405280519060200120826040516020016113119291906135e7565b6000806000846001600160a01b031663a6ed563e61208a86611fad565b6040518263ffffffff1660e01b81526004016120a891815260200190565b602060405180830381865afa1580156120c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e99190613836565b9050806120fd5760008092509250506112a1565b6001856001600160a01b031663dc97d96261169e84612579565b6000808212156109935760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161091d565b600080600080856001600160a01b03166385725b58866040518263ffffffff1660e01b815260040161219b9190613875565b602060405180830381865afa1580156121b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121dc9190613836565b90506000808083156123b1576040516306459e2360e51b8152600481018590526001600160a01b038a169063c8b3c46090602401602060405180830381865afa15801561222d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122519190613889565b92506000896001600160a01b0316631582a018856040518263ffffffff1660e01b81526004016122819190613875565b602060405180830381865afa15801561229e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c29190613836565b60405163039af9eb60e01b8152600481018290529091506001600160a01b038b169063039af9eb906024016040805180830381865afa158015612309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232d91906138a6565b60405163071a6a7960e41b815291945092506000906001600160a01b038c16906371a6a79090612361908890600401613875565b602060405180830381865afa15801561237e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a29190613836565b905080156123ae578092505b50505b826123bb836125bc565b6123c4836125bc565b965096509650505050509250925092565b60006040516020016112e3906020808252601390820152722827a9a4aa24a7a72fa322a2afa320a1aa27a960691b604082015260600190565b6000836001600160a01b031663bd02d0f56109b285856125e1565b60006040516020016124669060208082526017908201527646554e44494e475f414d4f554e545f5045525f53495a4560481b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b038087169183019190915284166060820152821515608082015260a001611ccd565b600080806124b985876136ee565b905060006124c78583611774565b905081158015906124d6575080155b97909650945050505050565b6000846001600160a01b031663bd02d0f561116c868686612622565b6000604051602001612466906020808252600d908201526c13d4115397d2539511549154d5609a1b604082015260600190565b60008061253e858461265f565b9050600261254c8286610bb5565b6111cb91906137de565b600081156125675761122883610929565b61257083610929565b6112289061381a565b6000604051602001612045906020808252601f908201527f5649525455414c5f494e56454e544f52595f464f525f504f534954494f4e5300604082015260600190565b60006127106125d768327cb2734119d3b7a9601e1b846136cf565b610ac491906137de565b6000604051602001611d66906020808252601b908201527a21aaa6aaa620aa24ab22afa127a92927aba4a723afa320a1aa27a960291b604082015260600190565b6000604051602001612466906020808252601790820152764f50454e5f494e5445524553545f494e5f544f4b454e5360481b604082015260600190565b600068327cb2734119d3b7a9601e1b83101561267d57506000610ac4565b68327cb2734119d3b7a9601e1b8203612697575081610ac4565b60006126b36126a5856126be565b6126ae856126be565b6126cf565b90506113858161270f565b6000610ac464e8d4a51000836137de565b6000826000036126f55781156126e6576000611228565b50670de0b6b3a7640000610ac4565b610ac161270a61270485612720565b846127d6565b6127e2565b6000610ac464e8d4a51000836136cf565b6000670de0b6b3a764000082101561274e57604051633621413760e21b81526004810183905260240161091d565b6000612763670de0b6b3a76400008404612828565b670de0b6b3a764000081029250905082811c670de0b6b3a763ffff19810161278c575050919050565b6706f05b59d3b200005b80156127ce57670de0b6b3a7640000828002049150671bc16d674ec8000082106127c6579283019260019190911c905b60011c612796565b505050919050565b6000610ac1838361290b565b6000680a688906bd8b000000821061281057604051634a4f26f160e01b81526004810183905260240161091d565b670de0b6b3a7640000604083901b04610a14816129d1565b6000600160801b821061284857608091821c91612845908261384f565b90505b600160401b821061286657604091821c91612863908261384f565b90505b600160201b821061288457602091821c91612881908261384f565b90505b6201000082106128a157601091821c9161289e908261384f565b90505b61010082106128bd57600891821c916128ba908261384f565b90505b601082106128d857600491821c916128d5908261384f565b90505b600482106128f357600291821c916128f0908261384f565b90505b6002821061290657610ac460018261384f565b919050565b60008080600019848609848602925082811083820303915050670de0b6b3a7640000811061294f5760405163698d9a0160e11b81526004810182905260240161091d565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff821190508260000361298d5780670de0b6b3a7640000850401945050505050610ac4565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b6001603f1b8216156129f15768016a09e667f3bcc9090260401c5b6001603e1b821615612a0c576801306fe0a31b7152df0260401c5b6001603d1b821615612a27576801172b83c7d517adce0260401c5b6001603c1b821615612a425768010b5586cf9890f62a0260401c5b6001603b1b821615612a5d576801059b0d31585743ae0260401c5b6001603a1b821615612a7857680102c9a3e778060ee70260401c5b600160391b821615612a935768010163da9fb33356d80260401c5b600160381b821615612aae57680100b1afa5abcbed610260401c5b600160371b821615612ac95768010058c86da1c09ea20260401c5b600160361b821615612ae4576801002c605e2e8cec500260401c5b600160351b821615612aff57680100162f3904051fa10260401c5b600160341b821615612b1a576801000b175effdc76ba0260401c5b600160331b821615612b3557680100058ba01fb9f96d0260401c5b600160321b821615612b505768010002c5cc37da94920260401c5b600160311b821615612b6b576801000162e525ee05470260401c5b600160301b821615612b865768010000b17255775c040260401c5b6001602f1b821615612ba1576801000058b91b5bc9ae0260401c5b6001602e1b821615612bbc57680100002c5c89d5ec6d0260401c5b6001602d1b821615612bd75768010000162e43f4f8310260401c5b6001602c1b821615612bf257680100000b1721bcfc9a0260401c5b6001602b1b821615612c0d5768010000058b90cf1e6e0260401c5b6001602a1b821615612c28576801000002c5c863b73f0260401c5b600160291b821615612c4357680100000162e430e5a20260401c5b600160281b821615612c5e576801000000b1721835510260401c5b600160271b821615612c7957680100000058b90c0b490260401c5b600160261b821615612c945768010000002c5c8601cc0260401c5b600160251b821615612caf576801000000162e42fff00260401c5b600160241b821615612cca5768010000000b17217fbb0260401c5b600160231b821615612ce5576801000000058b90bfce0260401c5b600160221b821615612d0057680100000002c5c85fe30260401c5b600160211b821615612d1b5768010000000162e42ff10260401c5b600160201b821615612d3657680100000000b17217f80260401c5b6380000000821615612d515768010000000058b90bfc0260401c5b6340000000821615612d6c576801000000002c5c85fe0260401c5b6320000000821615612d8757680100000000162e42ff0260401c5b6310000000821615612da2576801000000000b17217f0260401c5b6308000000821615612dbd57680100000000058b90c00260401c5b6304000000821615612dd85768010000000002c5c8600260401c5b6302000000821615612df3576801000000000162e4300260401c5b6301000000821615612e0e5768010000000000b172180260401c5b62800000821615612e28576801000000000058b90c0260401c5b62400000821615612e4257680100000000002c5c860260401c5b62200000821615612e5c5768010000000000162e430260401c5b62100000821615612e7657680100000000000b17210260401c5b62080000821615612e905768010000000000058b910260401c5b62040000821615612eaa576801000000000002c5c80260401c5b62020000821615612ec457680100000000000162e40260401c5b62010000821615612edd5761b172600160401b010260401c5b618000821615612ef5576158b9600160401b010260401c5b614000821615612f0d57612c5d600160401b010260401c5b612000821615612f255761162e600160401b010260401c5b611000821615612f3d57610b17600160401b010260401c5b610800821615612f555761058c600160401b010260401c5b610400821615612f6d576102c6600160401b010260401c5b610200821615612f8557610163600160401b010260401c5b610100821615612f9c5760b1600160401b010260401c5b6080821615612fb2576059600160401b010260401c5b6040821615612fc857602c600160401b010260401c5b6020821615612fde576016600160401b010260401c5b6010821615612ff457600b600160401b010260401c5b600882161561300a576006600160401b010260401c5b6004821615613020576003600160401b010260401c5b6002821615613036576001600160401b010260401c5b600182161561304c576001600160401b010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b604080516101808101909152600061012082018181526101408301829052610160830191909152815260208101613098613174565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060e001604052806131446040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b6001600160a01b038116811461092657600080fd5b604051606081016001600160401b03811182821017156131fa57634e487b7160e01b600052604160045260246000fd5b60405290565b60405161010081016001600160401b03811182821017156131fa57634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156131fa57634e487b7160e01b600052604160045260246000fd5b8035801515811461290657600080fd5b60006020828403121561328357600080fd5b604051602081016001600160401b03811182821017156132b357634e487b7160e01b600052604160045260246000fd5b6040529050806132c283613261565b905292915050565b60008183036101808112156132de57600080fd5b6132e66131ca565b915060608112156132f657600080fd5b6132fe6131ca565b8335613309816131b5565b81526020840135613319816131b5565b6020820152604084013561332c816131b5565b60408201528252610100605f19820181131561334757600080fd5b61334f613200565b9150606084013582526080840135602083015260a0840135604083015260c0840135606083015260e084013560808301528084013560a08301525061012083013560c082015261014083013560e0820152806020830152506133b5836101608401613271565b604082015292915050565b6000608082840312156133d257600080fd5b604051608081016001600160401b038111828210171561340257634e487b7160e01b600052604160045260246000fd5b6040529050808235613413816131b5565b81526020830135613423816131b5565b60208201526040830135613436816131b5565b60408201526060830135613449816131b5565b6060919091015292915050565b60006040828403121561346857600080fd5b604080519081016001600160401b038111828210171561349857634e487b7160e01b600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b600060c082840312156134c457600080fd5b6134cc6131ca565b90506134d88383613456565b81526134e78360408401613456565b60208201526133b58360808401613456565b600080600080600080610320878903121561351357600080fd5b863561351e816131b5565b9550602087013561352e816131b5565b945061353d88604089016132ca565b935061354d886101c089016133c0565b925061355d8861024089016134b2565b915061356c6103008801613261565b90509295509295509295565b600080600080600080610320878903121561359257600080fd5b863561359d816131b5565b95506135ac88602089016133c0565b94506135bb8860a089016134b2565b93506135cb8861016089016132ca565b92506102e0870135915061030087013590509295509295509295565b918252602082015260400190565b60008060008060008086880361024081121561361057600080fd5b873561361b816131b5565b965061362a8960208a016133c0565b95506136398960a08a016134b2565b945061016088013561364a816131b5565b93506136596101808901613261565b925060a061019f198201121561366e57600080fd5b50613677613231565b6101a088013581526101c088013560208201526101e0880135604082015261020088013560608201526102208801356080820152809150509295509295509295565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156136e9576136e96136b9565b500290565b818103600083128015838313168383128216171561370e5761370e6136b9565b5092915050565b634e487b7160e01b600052601260045260246000fd5b60008261373a5761373a613715565b600160ff1b821460001984141615613754576137546136b9565b500590565b60006001600160ff1b038184138284138082168684048611161561377f5761377f6136b9565b600160ff1b600087128281168783058912161561379e5761379e6136b9565b600087129250878205871284841616156137ba576137ba6136b9565b878505871281841616156137d0576137d06136b9565b505050929093029392505050565b6000826137ed576137ed613715565b500490565b8082018281126000831280158216821582161715613812576138126136b9565b505092915050565b6000600160ff1b820161382f5761382f6136b9565b5060000390565b60006020828403121561384857600080fd5b5051919050565b80820180821115610ac457610ac46136b9565b81810381811115610ac457610ac46136b9565b6001600160a01b0391909116815260200190565b60006020828403121561389b57600080fd5b8151610a14816131b5565b600080604083850312156138b957600080fd5b50508051602090910151909290915056fea264697066735822122087c149568cac8ee10cec2b78909f14a0e35926559d4ced640d8efe099c8883b664736f6c63430008100033";

type PositionUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PositionUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PositionUtils__factory extends ContractFactory {
  constructor(...args: PositionUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PositionUtils> {
    return super.deploy(overrides || {}) as Promise<PositionUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PositionUtils {
    return super.attach(address) as PositionUtils;
  }
  override connect(signer: Signer): PositionUtils__factory {
    return super.connect(signer) as PositionUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PositionUtilsInterface {
    return new utils.Interface(_abi) as PositionUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PositionUtils {
    return new Contract(address, _abi, signerOrProvider) as PositionUtils;
  }
}
