/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SwapOrderUtils,
  SwapOrderUtilsInterface,
} from "../../../contracts/order/SwapOrderUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "minOracleBlockNumbers",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "maxOracleBlockNumbers",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "OracleBlockNumberNotWithinRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "oracleBlockNumbers",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "expectedBlockNumber",
        type: "uint256",
      },
    ],
    name: "OracleBlockNumbersAreSmallerThanRequired",
    type: "error",
  },
  {
    inputs: [],
    name: "UnexpectedMarket",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsupportedOrderType",
    type: "error",
  },
];

const _bytecode =
  "0x610db961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063da6fe44f1461003a575b600080fd5b81801561004657600080fd5b5061005a610055366004610a0e565b61005c565b005b604081015151606001516001600160a01b03161561008d5760405163cc3459ff60e01b815260040160405180910390fd5b6100bd81608001518260a001516100aa8460400151602001515190565b60408501516020015161012001516102c3565b73__$2ebd8d293950cf319742e0db402ead4961$__635706dc466040518061014001604052808460000151600001516001600160a01b031681526020018460000151602001516001600160a01b031681526020018460000151606001516001600160a01b031681526020018460000151604001516001600160a01b0316815260200161014f8560400151516080015190565b6001600160a01b031681526020016101708560400151602001516060015190565b815260200184606001518152602001610193856040015160200151610100015190565b81526020016101a88560400151516020015190565b6001600160a01b031681526020016101c98560400151604001516020015190565b15158152506040518263ffffffff1660e01b81526004016101ea9190610bbe565b6040805180830381865af4158015610206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022a9190610c7a565b505080515160208201516040830151515173__$9dcb75ef0bb6c4288f2ccffe7dc492c4eb$__926374b6fe1392909160405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260640160006040518083038186803b1580156102a857600080fd5b505af41580156102bc573d6000803e3d6000fd5b5050505050565b60008260078111156102d7576102d7610ca8565b036102ec576102e784848361032b565b610325565b600182600781111561030057610300610ca8565b0361031d5761030f848261034a565b6102e7576102e7848261039f565b6103256103c4565b50505050565b6103368383836103dd565b61034557610345838383610416565b505050565b6000805b8351811015610393578284828151811061036a5761036a610cbe565b602002602001015111610381576000915050610399565b8061038b81610cd4565b91505061034e565b50600190505b92915050565b818160405162f2302f60e71b81526004016103bb929190610d2b565b60405180910390fd5b60405163c1c0083160e01b815260040160405180910390fd5b60006103e98483610435565b6103f55750600061040f565b6103ff838361047f565b61040b5750600061040f565b5060015b9392505050565b828282604051633e0fa80560e11b81526004016103bb93929190610d4d565b6000805b8351811015610393578284828151811061045557610455610cbe565b6020026020010151111561046d576000915050610399565b8061047781610cd4565b915050610439565b6000805b8351811015610393578284828151811061049f5761049f610cbe565b602002602001015110156104b7576000915050610399565b806104c181610cd4565b915050610483565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715610501576105016104c9565b60405290565b60405161014081016001600160401b0381118282101715610501576105016104c9565b604051606081016001600160401b0381118282101715610501576105016104c9565b604051601f8201601f191681016001600160401b0381118282101715610574576105746104c9565b604052919050565b6001600160a01b038116811461059157600080fd5b50565b600060c082840312156105a657600080fd5b6105ae6104df565b905081356105bb8161057c565b815260208201356105cb8161057c565b602082015260408201356105de8161057c565b604082015260608201356105f18161057c565b606082015260808201356106048161057c565b608082015260a08201356106178161057c565b60a082015292915050565b803561062d8161057c565b919050565b60006001600160401b0382111561064b5761064b6104c9565b5060051b60200190565b600082601f83011261066657600080fd5b8135602061067b61067683610632565b61054c565b82815260059290921b8401810191818101908684111561069a57600080fd5b8286015b848110156106be5780356106b18161057c565b835291830191830161069e565b509695505050505050565b80356008811061062d57600080fd5b80356003811061062d57600080fd5b600061014082840312156106fa57600080fd5b610702610507565b905061070d826106c9565b815261071b602083016106d8565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b8035801515811461062d57600080fd5b60006060828403121561079c57600080fd5b6107a461052a565b90506107af8261077a565b81526107bd6020830161077a565b60208201526107ce6040830161077a565b604082015292915050565b60006101c082840312156107ec57600080fd5b6107f461052a565b905081356001600160401b038082111561080d57600080fd5b9083019060c0828603121561082157600080fd5b6108296104df565b82356108348161057c565b815260208301356108448161057c565b602082015260408301356108578161057c565b604082015261086860608401610622565b606082015261087960808401610622565b608082015260a08301358281111561089057600080fd5b61089c87828601610655565b60a0830152508352506108b4905083602084016106e7565b60208201526107ce83610160840161078a565b6000608082840312156108d957600080fd5b604051608081016001600160401b03811182821017156108fb576108fb6104c9565b604052905080823561090c8161057c565b8152602083013561091c8161057c565b6020820152604083013561092f8161057c565b604082015260608301356109428161057c565b6060919091015292915050565b600082601f83011261096057600080fd5b8135602061097061067683610632565b82815260079290921b8401810191818101908684111561098f57600080fd5b8286015b848110156106be576109a588826108c7565b835291830191608001610993565b600082601f8301126109c457600080fd5b813560206109d461067683610632565b82815260059290921b840181019181810190868411156109f357600080fd5b8286015b848110156106be57803583529183019183016109f7565b600060208284031215610a2057600080fd5b81356001600160401b0380821115610a3757600080fd5b908301906102408286031215610a4c57600080fd5b610a54610507565b610a5e8684610594565b815260c0830135602082015260e083013582811115610a7c57600080fd5b610a88878286016107d9565b6040830152506101008084013583811115610aa257600080fd5b610aae8882870161094f565b6060840152506101208085013584811115610ac857600080fd5b610ad4898288016109b3565b60808501525061014085013584811115610aed57600080fd5b610af9898288016109b3565b60a085015250610b0d8861016087016108c7565b60c0840152610b1f6101e08601610622565b60e08401526102008501358284015261022085013581840152505080935050505092915050565b6001600160a01b03169052565b600081518084526020808501945080840160005b83811015610bb357815180516001600160a01b039081168952848201518116858a01526040808301518216908a0152606091820151169088015260809096019590820190600101610b67565b509495945050505050565b60208152610bd0602082018351610b46565b60006020830151610be46040840182610b46565b506040830151610bf76060840182610b46565b506060830151610c0a6080840182610b46565b506080830151610c1d60a0840182610b46565b5060a083015160c083015260c08301516101408060e0850152610c44610160850183610b53565b60e086015161010086810191909152860151909250610120610c6881870183610b46565b90950151151593019290925250919050565b60008060408385031215610c8d57600080fd5b8251610c988161057c565b6020939093015192949293505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060018201610cf457634e487b7160e01b600052601160045260246000fd5b5060010190565b600081518084526020808501945080840160005b83811015610bb357815187529582019590820190600101610d0f565b604081526000610d3e6040830185610cfb565b90508260208301529392505050565b606081526000610d606060830186610cfb565b8281036020840152610d728186610cfb565b91505082604083015294935050505056fea264697066735822122064aafaa25813636208d50a5f53fb8df4dae6ed8b193d433e537211d91a8c63ee64736f6c63430008100033";

type SwapOrderUtilsConstructorParams =
  | [linkLibraryAddresses: SwapOrderUtilsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapOrderUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class SwapOrderUtils__factory extends ContractFactory {
  constructor(...args: SwapOrderUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        SwapOrderUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: SwapOrderUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$2ebd8d293950cf319742e0db402ead4961\\$__", "g"),
      linkLibraryAddresses["contracts/swap/SwapUtils.sol:SwapUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$9dcb75ef0bb6c4288f2ccffe7dc492c4eb\\$__", "g"),
      linkLibraryAddresses[
        "contracts/order/OrderStoreUtils.sol:OrderStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapOrderUtils> {
    return super.deploy(overrides || {}) as Promise<SwapOrderUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapOrderUtils {
    return super.attach(address) as SwapOrderUtils;
  }
  override connect(signer: Signer): SwapOrderUtils__factory {
    return super.connect(signer) as SwapOrderUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapOrderUtilsInterface {
    return new utils.Interface(_abi) as SwapOrderUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapOrderUtils {
    return new Contract(address, _abi, signerOrProvider) as SwapOrderUtils;
  }
}

export interface SwapOrderUtilsLibraryAddresses {
  ["contracts/swap/SwapUtils.sol:SwapUtils"]: string;
  ["contracts/order/OrderStoreUtils.sol:OrderStoreUtils"]: string;
}
