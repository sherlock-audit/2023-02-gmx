/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BaseOrderUtils,
  BaseOrderUtilsInterface,
} from "../../../contracts/order/BaseOrderUtils";

const _abi = [
  {
    inputs: [],
    name: "EmptyOrder",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "primaryPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "secondaryPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "triggerPrice",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "shouldValidateAscendingPrice",
        type: "bool",
      },
    ],
    name: "InvalidOrderPrices",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "acceptablePrice",
        type: "uint256",
      },
    ],
    name: "OrderNotFulfillableDueToPriceImpact",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "priceImpactUsdForPriceAdjustment",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "sizeDeltaUsd",
        type: "uint256",
      },
    ],
    name: "PriceImpactLargerThanOrderSize",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsupportedOrderType",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122084b2291e3650ca89f72f605625633ce5e52c9e5c228cc7fe5453495cc227bf0164736f6c63430008100033";

type BaseOrderUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseOrderUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseOrderUtils__factory extends ContractFactory {
  constructor(...args: BaseOrderUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BaseOrderUtils> {
    return super.deploy(overrides || {}) as Promise<BaseOrderUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BaseOrderUtils {
    return super.attach(address) as BaseOrderUtils;
  }
  override connect(signer: Signer): BaseOrderUtils__factory {
    return super.connect(signer) as BaseOrderUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseOrderUtilsInterface {
    return new utils.Interface(_abi) as BaseOrderUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseOrderUtils {
    return new Contract(address, _abi, signerOrProvider) as BaseOrderUtils;
  }
}
