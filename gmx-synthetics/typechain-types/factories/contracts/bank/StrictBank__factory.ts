/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StrictBank,
  StrictBankInterface,
} from "../../../contracts/bank/StrictBank";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract RoleStore",
        name: "_roleStore",
        type: "address",
      },
      {
        internalType: "contract DataStore",
        name: "_dataStore",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EmptyReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
    ],
    name: "InvalidNativeTokenSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "SelfTransferNotSupported",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokenTransferError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
      {
        internalType: "string",
        name: "role",
        type: "string",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "dataStore",
    outputs: [
      {
        internalType: "contract DataStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "recordTransferIn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "roleStore",
    outputs: [
      {
        internalType: "contract RoleStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokenBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferOut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "shouldUnwrapNativeToken",
        type: "bool",
      },
    ],
    name: "transferOut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferOutNativeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161111438038061111483398101604081905261002f9161005e565b6001600160a01b039182166080521660a052610098565b6001600160a01b038116811461005b57600080fd5b50565b6000806040838503121561007157600080fd5b825161007c81610046565b602084015190925061008d81610046565b809150509250929050565b60805160a05161102e6100e6600039600081816070015281816101c401528181610332015281816103d3015281816104e80152610548015260008181610156015261041b015261102e6000f3fe6080604052600436106100645760003560e01c8063078d3b79146100d15780632fb12605146100f1578063352f9aed146101115780634a4a7b0414610144578063523fba7f14610185578063660d0d67146101b2578063d443ca94146101e657600080fd5b366100cc5760006100947f0000000000000000000000000000000000000000000000000000000000000000610206565b9050336001600160a01b038216146100ca573360405163738d28df60e11b81526004016100c19190610cac565b60405180910390fd5b005b600080fd5b3480156100dd57600080fd5b506100ca6100ec366004610cd5565b6102b9565b3480156100fd57600080fd5b506100ca61010c366004610d24565b610319565b34801561011d57600080fd5b5061013161012c366004610d77565b61039d565b6040519081526020015b60405180910390f35b34801561015057600080fd5b506101787f000000000000000000000000000000000000000000000000000000000000000081565b60405161013b9190610cac565b34801561019157600080fd5b506101316101a0366004610d77565b60006020819052908152604090205481565b3480156101be57600080fd5b506101787f000000000000000000000000000000000000000000000000000000000000000081565b3480156101f257600080fd5b506100ca610201366004610d9b565b6103ba565b6000816001600160a01b03166321f8a72160405160200161023e9060208082526003908201526215d39560ea1b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161027291815260200190565b602060405180830381865afa15801561028f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b39190610dc7565b92915050565b6103096040516020016102cb90610de4565b604051602081830303815290604052805190602001206040518060400160405280600a81526020016921a7a72a2927a62622a960b11b815250610404565b6103148383836104b8565b505050565b61032b6040516020016102cb90610de4565b60006103567f0000000000000000000000000000000000000000000000000000000000000000610206565b9050806001600160a01b0316856001600160a01b03161480156103765750815b1561038b57610386858585610518565b610396565b6103968585856104b8565b5050505050565b60006103b16040516020016102cb90610de4565b6102b38261056f565b6103cc6040516020016102cb90610de4565b60006103f77f0000000000000000000000000000000000000000000000000000000000000000610206565b9050610314818484610518565b60405163ac4ab3fb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ac4ab3fb906104529033908690600401610e08565b602060405180830381865afa15801561046f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104939190610e21565b6104b457338160405163a35b150b60e01b81526004016100c1929190610e8e565b5050565b306001600160a01b038316036104e35781604051637387c8a960e11b81526004016100c19190610cac565b61050f7f0000000000000000000000000000000000000000000000000000000000000000848484610620565b6103148361074b565b306001600160a01b038316036105435781604051637387c8a960e11b81526004016100c19190610cac565b61050f7f00000000000000000000000000000000000000000000000000000000000000008484846107d4565b6001600160a01b0381166000818152602081905260408082205490516370a0823160e01b8152919290918391906370a08231906105b0903090600401610cac565b602060405180830381865afa1580156105cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f19190610eb2565b6001600160a01b038516600090815260208190526040902081905590506106188282610ecb565b949350505050565b80156107455761062f8261097f565b6000846001600160a01b031663bd02d0f5610649866109a9565b6040518263ffffffff1660e01b815260040161066791815260200190565b602060405180830381865afa158015610684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a89190610eb2565b90506000806106b986868686610a31565b9150915081156106cb57505050610745565b60006106d682610b99565b5090507fc9f14d9a0a9b46470c7c0b6c508f8283abaab7f795f153953c58cd4250824dae818360405161070a929190610eec565b60405180910390a160405163012f3b8f60e71b81526001600160a01b03808916600483015287166024820152604481018690526064016100c1565b50505050565b6040516370a0823160e01b81526001600160a01b038216906370a0823190610777903090600401610cac565b602060405180830381865afa158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b89190610eb2565b6001600160a01b03909116600090815260208190526040902055565b8015610745576107e38261097f565b604051632e1a7d4d60e01b8152600481018290526001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b15801561082557600080fd5b505af1158015610839573d6000803e3d6000fd5b505050506000846001600160a01b031663bd02d0f560405160200161088f906020808252601f908201527f4e41544956455f544f4b454e5f5452414e534645525f4741535f4c494d495400604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016108c391815260200190565b602060405180830381865afa1580156108e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109049190610eb2565b90506000836001600160a01b0316838390604051600060405180830381858888f193505050503d8060008114610956576040519150601f19603f3d011682016040523d82523d6000602084013e61095b565b606091505b50509050801561096c575050610745565b610977868585610c29565b505050505050565b6001600160a01b0381166109a65760405163d551823d60e01b815260040160405180910390fd5b50565b60006040516020016109e7906020808252601890820152771513d2d15397d514905394d1915497d1d054d7d31253525560421b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b03841690820152606001604051602081830303815290604052805190602001209050919050565b60006060600063a9059cbb60e01b8686604051602401610a52929190610e08565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050600080886001600160a01b03168684604051610aa39190610f1a565b60006040518083038160008787f1925050503d8060008114610ae1576040519150601f19603f3d011682016040523d82523d6000602084013e610ae6565b606091505b50915091508115610b87578051600003610b44576001600160a01b0389163b610b445760006040518060400160405280601481526020017310d85b1b081d1bc81b9bdb8b58dbdb9d1c9858dd60621b81525094509450505050610b90565b60008151118015610b66575080806020019051810190610b649190610e21565b155b15610b7957600094509250610b90915050565b600194509250610b90915050565b60009450925050505b94509492505050565b60606000604483511015610bc0575050604080516020810190915260008082529092909150565b6000610bcd846020015190565b90506307b9e43360e51b6001600160e01b0319821601610c0c5760048401935083806020019051810190610c019190610f4c565b946001945092505050565b600060405180602001604052806000815250909250925050915091565b80600003610c3657505050565b610c3f8261097f565b6000610c4a84610206565b9050806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c8757600080fd5b505af1158015610c9b573d6000803e3d6000fd5b505050505061074584828585610620565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146109a657600080fd5b600080600060608486031215610cea57600080fd5b8335610cf581610cc0565b92506020840135610d0581610cc0565b929592945050506040919091013590565b80151581146109a657600080fd5b60008060008060808587031215610d3a57600080fd5b8435610d4581610cc0565b93506020850135610d5581610cc0565b9250604085013591506060850135610d6c81610d16565b939692955090935050565b600060208284031215610d8957600080fd5b8135610d9481610cc0565b9392505050565b60008060408385031215610dae57600080fd5b8235610db981610cc0565b946020939093013593505050565b600060208284031215610dd957600080fd5b8151610d9481610cc0565b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b6001600160a01b03929092168252602082015260400190565b600060208284031215610e3357600080fd5b8151610d9481610d16565b60005b83811015610e59578181015183820152602001610e41565b50506000910152565b60008151808452610e7a816020860160208601610e3e565b601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061061890830184610e62565b600060208284031215610ec457600080fd5b5051919050565b818103818111156102b357634e487b7160e01b600052601160045260246000fd5b604081526000610eff6040830185610e62565b8281036020840152610f118185610e62565b95945050505050565b60008251610f2c818460208701610e3e565b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610f5e57600080fd5b81516001600160401b0380821115610f7557600080fd5b818401915084601f830112610f8957600080fd5b815181811115610f9b57610f9b610f36565b604051601f8201601f19908116603f01168101908382118183101715610fc357610fc3610f36565b81604052828152876020848701011115610fdc57600080fd5b610fed836020830160208801610e3e565b97965050505050505056fea26469706673582212201570a8a909253d629fb61964e91e9e1a87ddb6295a02daf7befbd05b5de4b08a64736f6c63430008100033";

type StrictBankConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StrictBankConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StrictBank__factory extends ContractFactory {
  constructor(...args: StrictBankConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _roleStore: PromiseOrValue<string>,
    _dataStore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StrictBank> {
    return super.deploy(
      _roleStore,
      _dataStore,
      overrides || {}
    ) as Promise<StrictBank>;
  }
  override getDeployTransaction(
    _roleStore: PromiseOrValue<string>,
    _dataStore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_roleStore, _dataStore, overrides || {});
  }
  override attach(address: string): StrictBank {
    return super.attach(address) as StrictBank;
  }
  override connect(signer: Signer): StrictBank__factory {
    return super.connect(signer) as StrictBank__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StrictBankInterface {
    return new utils.Interface(_abi) as StrictBankInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StrictBank {
    return new Contract(address, _abi, signerOrProvider) as StrictBank;
  }
}
