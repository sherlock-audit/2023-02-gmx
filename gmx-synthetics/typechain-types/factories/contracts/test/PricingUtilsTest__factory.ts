/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PricingUtilsTest,
  PricingUtilsTestInterface,
} from "../../../contracts/test/PricingUtilsTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__Exp2InputTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__LogInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivFixedPointOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "diffUsd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "impactFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "impactExponentFactor",
        type: "uint256",
      },
    ],
    name: "applyImpactFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c84806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c320b6aa14610030575b600080fd5b61004361003e366004610ba2565b610055565b60405190815260200160405180910390f35b600061006284848461006a565b949350505050565b6000806100778584610098565b905060026100858286610101565b61008f9190610bfa565b95945050505050565b600068327cb2734119d3b7a9601e1b8310156100b6575060006100fb565b68327cb2734119d3b7a9601e1b82036100d05750816100fb565b60006100ec6100de856101a4565b6100e7856101a4565b6101b5565b90506100f7816101fe565b9150505b92915050565b6000806000610110858561020f565b9150915081156101395761013068327cb2734119d3b7a9601e1b82610bfa565b925050506100fb565b60008085871161014a57858761014d565b86865b909250905061017168056bc75e2d6310000068327cb2734119d3b7a9601e1b610bfa565b8161018568056bc75e2d6310000085610bfa565b61018f9190610c1c565b6101999190610bfa565b979650505050505050565b60006100fb64e8d4a5100083610bfa565b6000826000036101dd5781156101cc5760006101d6565b670de0b6b3a76400005b90506100fb565b6101f76101f26101ec8561025a565b84610315565b610321565b9392505050565b60006100fb64e8d4a5100083610c1c565b600080836000036102265750600190506000610253565b8383028385828161023957610239610bce565b041461024c576000809250925050610253565b6001925090505b9250929050565b6000670de0b6b3a764000082101561028d57604051633621413760e21b8152600481018390526024015b60405180910390fd5b60006102a2670de0b6b3a76400008404610367565b670de0b6b3a764000081029250905082811c670de0b6b3a763ffff1981016102cb575050919050565b6706f05b59d3b200005b801561030d57670de0b6b3a7640000828002049150671bc16d674ec800008210610305579283019260019190911c905b60011c6102d5565b505050919050565b60006101f7838361044a565b6000680a688906bd8b000000821061034f57604051634a4f26f160e01b815260048101839052602401610284565b670de0b6b3a7640000604083901b046101f781610510565b6000600160801b821061038757608091821c916103849082610c3b565b90505b600160401b82106103a557604091821c916103a29082610c3b565b90505b600160201b82106103c357602091821c916103c09082610c3b565b90505b6201000082106103e057601091821c916103dd9082610c3b565b90505b61010082106103fc57600891821c916103f99082610c3b565b90505b6010821061041757600491821c916104149082610c3b565b90505b6004821061043257600291821c9161042f9082610c3b565b90505b60028210610445576100fb600182610c3b565b919050565b60008080600019848609848602925082811083820303915050670de0b6b3a7640000811061048e5760405163698d9a0160e11b815260048101829052602401610284565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff82119050826000036104cc5780670de0b6b3a76400008504019450505050506100fb565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b6001603f1b8216156105305768016a09e667f3bcc9090260401c5b6001603e1b82161561054b576801306fe0a31b7152df0260401c5b6001603d1b821615610566576801172b83c7d517adce0260401c5b6001603c1b8216156105815768010b5586cf9890f62a0260401c5b6001603b1b82161561059c576801059b0d31585743ae0260401c5b6001603a1b8216156105b757680102c9a3e778060ee70260401c5b600160391b8216156105d25768010163da9fb33356d80260401c5b600160381b8216156105ed57680100b1afa5abcbed610260401c5b600160371b8216156106085768010058c86da1c09ea20260401c5b600160361b821615610623576801002c605e2e8cec500260401c5b600160351b82161561063e57680100162f3904051fa10260401c5b600160341b821615610659576801000b175effdc76ba0260401c5b600160331b82161561067457680100058ba01fb9f96d0260401c5b600160321b82161561068f5768010002c5cc37da94920260401c5b600160311b8216156106aa576801000162e525ee05470260401c5b600160301b8216156106c55768010000b17255775c040260401c5b6001602f1b8216156106e0576801000058b91b5bc9ae0260401c5b6001602e1b8216156106fb57680100002c5c89d5ec6d0260401c5b6001602d1b8216156107165768010000162e43f4f8310260401c5b6001602c1b82161561073157680100000b1721bcfc9a0260401c5b6001602b1b82161561074c5768010000058b90cf1e6e0260401c5b6001602a1b821615610767576801000002c5c863b73f0260401c5b600160291b82161561078257680100000162e430e5a20260401c5b600160281b82161561079d576801000000b1721835510260401c5b600160271b8216156107b857680100000058b90c0b490260401c5b600160261b8216156107d35768010000002c5c8601cc0260401c5b600160251b8216156107ee576801000000162e42fff00260401c5b600160241b8216156108095768010000000b17217fbb0260401c5b600160231b821615610824576801000000058b90bfce0260401c5b600160221b82161561083f57680100000002c5c85fe30260401c5b600160211b82161561085a5768010000000162e42ff10260401c5b600160201b82161561087557680100000000b17217f80260401c5b63800000008216156108905768010000000058b90bfc0260401c5b63400000008216156108ab576801000000002c5c85fe0260401c5b63200000008216156108c657680100000000162e42ff0260401c5b63100000008216156108e1576801000000000b17217f0260401c5b63080000008216156108fc57680100000000058b90c00260401c5b63040000008216156109175768010000000002c5c8600260401c5b6302000000821615610932576801000000000162e4300260401c5b630100000082161561094d5768010000000000b172180260401c5b62800000821615610967576801000000000058b90c0260401c5b6240000082161561098157680100000000002c5c860260401c5b6220000082161561099b5768010000000000162e430260401c5b621000008216156109b557680100000000000b17210260401c5b620800008216156109cf5768010000000000058b910260401c5b620400008216156109e9576801000000000002c5c80260401c5b62020000821615610a0357680100000000000162e40260401c5b62010000821615610a1c5761b172600160401b010260401c5b618000821615610a34576158b9600160401b010260401c5b614000821615610a4c57612c5d600160401b010260401c5b612000821615610a645761162e600160401b010260401c5b611000821615610a7c57610b17600160401b010260401c5b610800821615610a945761058c600160401b010260401c5b610400821615610aac576102c6600160401b010260401c5b610200821615610ac457610163600160401b010260401c5b610100821615610adb5760b1600160401b010260401c5b6080821615610af1576059600160401b010260401c5b6040821615610b0757602c600160401b010260401c5b6020821615610b1d576016600160401b010260401c5b6010821615610b3357600b600160401b010260401c5b6008821615610b49576006600160401b010260401c5b6004821615610b5f576003600160401b010260401c5b6002821615610b75576001600160401b010260401c5b6001821615610b8b576001600160401b010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b600080600060608486031215610bb757600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082610c1757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610c3657610c36610be4565b500290565b808201808211156100fb576100fb610be456fea2646970667358221220149fe8e3207588ed6d94110ede9d23bc49486ba5d7a5a2636e14d577c76f183e64736f6c63430008100033";

type PricingUtilsTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PricingUtilsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PricingUtilsTest__factory extends ContractFactory {
  constructor(...args: PricingUtilsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PricingUtilsTest> {
    return super.deploy(overrides || {}) as Promise<PricingUtilsTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PricingUtilsTest {
    return super.attach(address) as PricingUtilsTest;
  }
  override connect(signer: Signer): PricingUtilsTest__factory {
    return super.connect(signer) as PricingUtilsTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PricingUtilsTestInterface {
    return new utils.Interface(_abi) as PricingUtilsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PricingUtilsTest {
    return new Contract(address, _abi, signerOrProvider) as PricingUtilsTest;
  }
}
